{
  "name": "toast",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-toast"],
  "content": "'use client';\\n\\nimport type { VariantProps } from 'tailwind-variants';\\nimport { forwardRef, useEffect, useState } from 'react';\\nimport { Cross2Icon } from '@radix-ui/react-icons';\\nimport {\\n  Action,\\n  Close,\\n  Description,\\n  Provider,\\n  Root,\\n  Title,\\n  Viewport,\\n} from '@radix-ui/react-toast';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst toastStyles = tv({\\n  slots: {\\n    base: clsx(\\n      'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-xl border p-4 pr-8 shadow-lg transition-all',\\n      'data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\\n    ),\\n    action: clsx(\\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-lg border border-grey-border bg-grey-base px-3 text-xs font-semibold outline-none transition-colors duration-200',\\n      'hover:border-grey-border-hover hover:bg-grey-bg-subtle',\\n      'focus-visible:ring-4 focus-visible:ring-grey-focus-ring',\\n      'disabled:cursor-not-allowed disabled:border-grey-line disabled:bg-grey-base disabled:text-grey-solid',\\n      'group-[.info]:border-info-border group-[.info]:bg-info-base',\\n      'group-[.info]:hover:border-info-border-hover group-[.info]:hover:bg-info-bg-subtle',\\n      'group-[.info]:focus-visible:ring-info-focus-ring',\\n      'group-[.success]:border-success-border group-[.success]:bg-success-base',\\n      'group-[.success]:hover:border-success-border-hover group-[.success]:hover:bg-success-bg-subtle',\\n      'group-[.success]:focus-visible:ring-success-focus-ring',\\n      'group-[.warning]:border-warning-border group-[.warning]:bg-warning-base',\\n      'group-[.warning]:hover:border-warning-border-hover group-[.warning]:hover:bg-warning-bg-subtle',\\n      'group-[.warning]:focus-visible:ring-warning-focus-ring',\\n      'group-[.error]:border-error-border group-[.error]:bg-error-base',\\n      'group-[.error]:hover:border-error-border-hover group-[.error]:hover:bg-error-bg-subtle',\\n      'group-[.error]:focus-visible:ring-error-focus-ring',\\n    ),\\n    close: clsx(\\n      'absolute right-1 top-1 rounded-md p-1 text-grey-text opacity-0 outline-none transition duration-200',\\n      'hover:text-grey-text-contrast',\\n      'focus-visible:opacity-100 focus-visible:ring-4 focus-visible:ring-grey-focus-ring',\\n      'group-hover:opacity-100',\\n      'group-[.info]:text-info-focus-ring',\\n      'group-[.info]:hover:text-info-solid',\\n      'group-[.info]:focus-visible:ring-info-focusRing',\\n      'group-[.success]:text-success-focus-ring',\\n      'group-[.success]:hover:text-success-solid',\\n      'group-[.success]:focus-visible:ring-success-focus-ring',\\n      'group-[.warning]:text-warning-focus-ring',\\n      'group-[.warning]:hover:text-warning-solid',\\n      'group-[.warning]:focus-visible:ring-warning-focus-ring',\\n      'group-[.error]:text-error-focus-ring',\\n      'group-[.error]:hover:text-error-solid',\\n      'group-[.error]:focus:ring-error-focus-ring',\\n    ),\\n    description: 'text-sm text-grey-text',\\n    title: clsx('text-sm font-semibold', '[&+div]:text-xs'),\\n    viewport: clsx(\\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4',\\n      'sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col',\\n      'md:max-w-md',\\n    ),\\n    toasterHeader: 'grid w-full gap-1',\\n  },\\n  variants: {\\n    intent: {\\n      default: { base: 'border-grey-line bg-grey-base' },\\n      info: { base: 'info border-info-line bg-info-base text-info-solid' },\\n      success: {\\n        base: 'success border-success-line bg-success-base text-success-solid',\\n      },\\n      warning: {\\n        base: 'warning border-warning-line bg-warning-base text-warning-solid',\\n      },\\n      error: { base: 'error border-error-line bg-error-base text-error-solid' },\\n    },\\n  },\\n  defaultVariants: {\\n    intent: 'default',\\n  },\\n});\\n\\nconst { base, action, close, description, title, viewport, toasterHeader } =\\n  toastStyles();\\n\\ntype ToastRef = React.ElementRef<typeof Root>;\\ntype ToastRadixProps = React.ComponentPropsWithoutRef<typeof Root>;\\ntype ToastVariants = VariantProps<typeof toastStyles>;\\nexport type ToastProps = object & ToastRadixProps & ToastVariants;\\n\\n/**\\n * Toast component that displays a toast notification.\\n *\\n * @param {ToastProps} props - The props for the Toast component.\\n * @param {string} [intent='default'] - The visual style of the toast (e.g., 'default', 'info', 'success', 'warning', 'error').\\n *\\n * @example\\n * ```ts\\n * toast({\\n *   title: 'Scheduled: Catch up',\\n *   description: 'Friday, February 10, 2023 at 5:57 PM',\\n * });\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-toast Toast Docs} for further information.\\n */\\nexport const Toast = forwardRef<ToastRef, ToastProps>(\\n  ({ intent, className, ...props }, ref) => (\\n    <Root ref={ref} className={base({ className, intent })} {...props} />\\n  ),\\n);\\n\\nToast.displayName = Root.displayName;\\n\\ntype ToastActionElement = React.ReactElement<typeof Action>;\\ntype ToastActionRef = React.ElementRef<typeof Action>;\\ntype ToastActionProps = React.ComponentProps<typeof Action>;\\n\\n/**\\n * ToastAction component that represents an action button within the toast.\\n *\\n * @param {ToastActionProps} props - The props for the ToastAction component.\\n *\\n * @example\\n * ```tsx\\n * <ToastAction onClick={handleClick}>Undo</ToastAction>\\n * ```\\n */\\nexport const ToastAction = forwardRef<ToastActionRef, ToastActionProps>(\\n  ({ className, ...props }, ref) => (\\n    <Action ref={ref} className={action({ className })} {...props} />\\n  ),\\n);\\n\\nToastAction.displayName = Action.displayName;\\n\\ntype ToastCloseRef = React.ElementRef<typeof Close>;\\ntype ToastCloseProps = React.ComponentPropsWithoutRef<typeof Close>;\\n\\n/**\\n * ToastClose component that allows the user to close the toast.\\n *\\n * @param {ToastCloseProps} props - The props for the ToastClose component.\\n *\\n * @example\\n * ```tsx\\n * <ToastClose />\\n * ```\\n */\\nexport const ToastClose = forwardRef<ToastCloseRef, ToastCloseProps>(\\n  ({ className, ...props }, ref) => (\\n    <Close ref={ref} className={close({ className })} {...props}>\\n      <Cross2Icon className='size-4' />\\n    </Close>\\n  ),\\n);\\n\\nToastClose.displayName = Close.displayName;\\n\\ntype ToastDescriptionRef = React.ElementRef<typeof Description>;\\ntype ToastDescriptionProps = React.ComponentPropsWithoutRef<typeof Description>;\\n\\n/**\\n * ToastDescription component that provides additional information about the toast.\\n *\\n * @param {ToastDescriptionProps} props - The props for the ToastDescription component.\\n *\\n * @example\\n * ```tsx\\n * <ToastDescription>Details about the toast notification.</ToastDescription>\\n * ```\\n */\\nexport const ToastDescription = forwardRef<\\n  ToastDescriptionRef,\\n  ToastDescriptionProps\\n>(({ className, ...props }, ref) => (\\n  <Description ref={ref} className={description({ className })} {...props} />\\n));\\n\\nToastDescription.displayName = Description.displayName;\\n\\n/**\\n * ToastProvider component that provides context for managing toasts.\\n *\\n * @param {React.ComponentProps<typeof Provider>} props - The props for the ToastProvider component.\\n *\\n * @example\\n * ```tsx\\n * <ToastProvider>{Toasts will be rendered here}</ToastProvider>\\n * ```\\n */\\nexport const ToastProvider = Provider;\\n\\ntype ToastTitleRef = React.ElementRef<typeof Title>;\\ntype ToastTitleProps = React.ComponentPropsWithoutRef<typeof Title>;\\n\\n/**\\n * ToastTitle component that displays the title of the toast.\\n *\\n * @param {ToastTitleProps} props - The props for the ToastTitle component.\\n *\\n * @example\\n * ```tsx\\n * <ToastTitle>Notification Title</ToastTitle>\\n * ```\\n */\\nexport const ToastTitle = forwardRef<ToastTitleRef, ToastTitleProps>(\\n  ({ className, ...props }, ref) => (\\n    <Title ref={ref} className={title({ className })} {...props} />\\n  ),\\n);\\n\\nToastTitle.displayName = Title.displayName;\\n\\ntype ToastViewportRef = React.ElementRef<typeof Viewport>;\\ntype ToastViewportProps = React.ComponentPropsWithoutRef<typeof Viewport>;\\n\\n/**\\n * ToastViewport component that defines the area where toasts are displayed.\\n *\\n * @param {ToastViewportProps} props - The props for the ToastViewport component.\\n *\\n * @example\\n * ```tsx\\n * <ToastViewport />\\n * ```\\n */\\nexport const ToastViewport = forwardRef<ToastViewportRef, ToastViewportProps>(\\n  ({ className, ...props }, ref) => (\\n    <Viewport ref={ref} className={viewport({ className })} {...props} />\\n  ),\\n);\\n\\nToastViewport.displayName = Viewport.displayName;\\n\\n/**\\n * Toaster component that renders toast notifications.\\n *\\n * @example\\n * ```tsx\\n * <Toaster />\\n * ```\\n */\\nexport const Toaster = () => {\\n  const { toasts } = useToast();\\n\\n  return (\\n    <ToastProvider>\\n      {toasts.map(function ({ id, title, description, action, ...props }) {\\n        return (\\n          <Toast key={id} {...props}>\\n            <div className={toasterHeader()}>\\n              {title && <ToastTitle>{title}</ToastTitle>}\\n              {description && (\\n                <ToastDescription>{description}</ToastDescription>\\n              )}\\n            </div>\\n            {action}\\n            <ToastClose />\\n          </Toast>\\n        );\\n      })}\\n      <ToastViewport />\\n    </ToastProvider>\\n  );\\n};\\n\\nconst TOAST_LIMIT = 1;\\nconst TOAST_REMOVE_DELAY = 1000000;\\n\\ntype ToasterToast = ToastProps & {\\n  id: string;\\n  title?: React.ReactNode;\\n  description?: React.ReactNode;\\n  action?: ToastActionElement;\\n};\\n\\nconst _ACTION_TYPES = {\\n  ADD_TOAST: 'ADD_TOAST',\\n  UPDATE_TOAST: 'UPDATE_TOAST',\\n  DISMISS_TOAST: 'DISMISS_TOAST',\\n  REMOVE_TOAST: 'REMOVE_TOAST',\\n} as const;\\n\\nlet count = 0;\\n\\nconst genId = () => {\\n  count = (count + 1) % Number.MAX_VALUE;\\n  return count.toString();\\n};\\n\\ntype ActionType = typeof _ACTION_TYPES;\\n\\ntype Action =\\n  | {\\n      type: ActionType['ADD_TOAST'];\\n      toast: ToasterToast;\\n    }\\n  | {\\n      type: ActionType['UPDATE_TOAST'];\\n      toast: Partial<ToasterToast>;\\n    }\\n  | {\\n      type: ActionType['DISMISS_TOAST'];\\n      toastId?: ToasterToast['id'];\\n    }\\n  | {\\n      type: ActionType['REMOVE_TOAST'];\\n      toastId?: ToasterToast['id'];\\n    };\\n\\ntype State = {\\n  toasts: ToasterToast[];\\n};\\n\\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\\n\\nconst addToRemoveQueue = (toastId: string) => {\\n  if (toastTimeouts.has(toastId)) {\\n    return;\\n  }\\n\\n  const timeout = setTimeout(() => {\\n    toastTimeouts.delete(toastId);\\n    dispatch({\\n      type: 'REMOVE_TOAST',\\n      toastId: toastId,\\n    });\\n  }, TOAST_REMOVE_DELAY);\\n\\n  toastTimeouts.set(toastId, timeout);\\n};\\n\\nexport const reducer = (state: State, action: Action): State => {\\n  switch (action.type) {\\n    case 'ADD_TOAST':\\n      return {\\n        ...state,\\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\\n      };\\n\\n    case 'UPDATE_TOAST':\\n      return {\\n        ...state,\\n        toasts: state.toasts.map((t) =>\\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\\n        ),\\n      };\\n\\n    case 'DISMISS_TOAST': {\\n      const { toastId } = action;\\n\\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\\n      // but I'll keep it here for simplicity\\n      if (toastId) {\\n        addToRemoveQueue(toastId);\\n      } else {\\n        state.toasts.forEach((toast) => {\\n          addToRemoveQueue(toast.id);\\n        });\\n      }\\n\\n      return {\\n        ...state,\\n        toasts: state.toasts.map((t) =>\\n          t.id === toastId || toastId === undefined\\n            ? {\\n                ...t,\\n                open: false,\\n              }\\n            : t,\\n        ),\\n      };\\n    }\\n    case 'REMOVE_TOAST':\\n      if (action.toastId === undefined) {\\n        return {\\n          ...state,\\n          toasts: [],\\n        };\\n      }\\n      return {\\n        ...state,\\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\\n      };\\n  }\\n};\\n\\nconst listeners: ((state: State) => void)[] = [];\\n\\nlet memoryState: State = { toasts: [] };\\n\\nconst dispatch = (action: Action) => {\\n  memoryState = reducer(memoryState, action);\\n  listeners.forEach((listener) => {\\n    listener(memoryState);\\n  });\\n};\\n\\ntype Toast = Omit<ToasterToast, 'id'>;\\n\\n/**\\n * toast function that triggers a toast notification.\\n *\\n * @param {Toast} props - The properties for the toast notification, including title and description.\\n *\\n * @example\\n * ```ts\\n * const { toast } = useToast();\\n * toast({\\n *   title: 'Scheduled: Catch up',\\n *   description: 'Friday, February 10, 2023 at 5:57 PM',\\n * });\\n * ```\\n */\\nexport const toast = ({ ...props }: Toast) => {\\n  const id = genId();\\n\\n  const update = (props: ToasterToast) =>\\n    dispatch({\\n      type: 'UPDATE_TOAST',\\n      toast: { ...props, id },\\n    });\\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\\n\\n  dispatch({\\n    type: 'ADD_TOAST',\\n    toast: {\\n      ...props,\\n      id,\\n      open: true,\\n      onOpenChange: (open) => {\\n        if (!open) dismiss();\\n      },\\n    },\\n  });\\n\\n  return {\\n    id: id,\\n    dismiss,\\n    update,\\n  };\\n};\\n\\n/**\\n * useToast hook that provides access to the current toast state and methods to manage toasts.\\n *\\n * @example\\n * ```ts\\n * const { toast } = useToast();\\n * toast({\\n *   title: 'New message!',\\n *   description: 'You have received a new message.',\\n * });\\n * ```\\n */\\nexport const useToast = () => {\\n  const [state, setState] = useState<State>(memoryState);\\n\\n  useEffect(() => {\\n    listeners.push(setState);\\n    return () => {\\n      const index = listeners.indexOf(setState);\\n      if (index > -1) {\\n        listeners.splice(index, 1);\\n      }\\n    };\\n  }, [state]);\\n\\n  return {\\n    ...state,\\n    toast,\\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\\n  };\\n};\\n"
}
