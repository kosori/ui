{
  "name": "command",
  "type": "component:ui",
  "dependencies": ["cmdk"],
  "content": "import type { DialogProps } from '@radix-ui/react-dialog';\\nimport { forwardRef } from 'react';\\nimport { MagnifyingGlassIcon } from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport {\\n  Command as CMDK,\\n  CommandEmpty as CMDKEmpty,\\n  CommandGroup as CMDKGroup,\\n  CommandInput as CMDKInput,\\n  CommandItem as CMDKItem,\\n  CommandList as CMDKList,\\n  CommandSeparator as CMDKSeparator,\\n} from 'cmdk';\\nimport { tv } from 'tailwind-variants';\\n\\nimport { Dialog, DialogContent } from '@kosori/ui/dialog';\\n\\nconst commandStyles = tv({\\n  slots: {\\n    base: 'flex h-full w-full flex-col overflow-hidden rounded-xl bg-grey-base',\\n    dialogContent: 'overflow-hidden p-0 shadow-lg',\\n    dialogCommand: clsx(\\n      '[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-semibold [&_[cmdk-group-heading]]:text-grey-text',\\n      '[&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0',\\n      '[&_[cmdk-group]]:px-1',\\n      '[&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5',\\n      '[&_[cmdk-input]]:h-11',\\n      '[&_[cmdk-item]]:h-auto [&_[cmdk-item]]:px-3 [&_[cmdk-item]]:py-2',\\n      '[&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5',\\n    ),\\n    inputWrapper:\\n      'flex items-center border-b border-grey-line px-3 outline-none',\\n    inputIcon: 'mr-2 h-4 w-4 shrink-0 text-grey-text',\\n    input: clsx(\\n      'flex h-10 w-full rounded-lg bg-grey-base py-3 text-sm',\\n      'placeholder:text-grey-placeholder-text',\\n      'focus:outline-none',\\n    ),\\n    list: clsx(\\n      'max-h-xs overflow-h-auto h-full overflow-x-hidden outline-none',\\n      'focus-visible:ring-4 focus-visible:ring-primary-focus-ring',\\n    ),\\n    empty: 'py-6 text-center text-sm',\\n    group: clsx(\\n      'overflow-hidden p-1 text-grey-text-contrast',\\n      '[&_[cmdk-group-heading]]:flex [&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:items-center [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-grey-text',\\n    ),\\n    item: clsx(\\n      'group relative flex cursor-pointer select-none items-center rounded-md px-2 py-1.5 text-sm outline-none',\\n      'aria-selected:bg-primary-bg-hover',\\n      'aria-disabled:cursor-not-allowed aria-disabled:text-grey-solid',\\n    ),\\n    shortcut: clsx(\\n      'ml-auto text-xs tracking-widest text-grey-text',\\n      'group-aria-disabled:text-grey-solid',\\n    ),\\n    separator: '-mx-1 h-px bg-grey-line',\\n  },\\n});\\n\\nconst {\\n  base,\\n  dialogContent,\\n  dialogCommand,\\n  inputWrapper,\\n  inputIcon,\\n  input,\\n  list,\\n  empty,\\n  group,\\n  item,\\n  shortcut,\\n  separator,\\n} = commandStyles();\\n\\n/**\\n * Command component that provides a command palette for executing commands or searching.\\n *\\n * @param {CommandProps} props - The props for the Command component.\\n *\\n * @example\\n * ```tsx\\n * <Command>\\n *   <CommandInput placeholder='Type a command or search...' />\\n *   <CommandList>\\n *     <CommandEmpty>No results found.</CommandEmpty>\\n *     <CommandGroup heading='Suggestions'>\\n *       <CommandItem>Calendar</CommandItem>\\n *       <CommandItem>Search Emoji</CommandItem>\\n *       <CommandItem>Calculator</CommandItem>\\n *     </CommandGroup>\\n *     <CommandSeparator />\\n *     <CommandGroup heading='Settings'>\\n *       <CommandItem>Profile</CommandItem>\\n *       <CommandItem>Billing</CommandItem>\\n *       <CommandItem>Settings</CommandItem>\\n *     </CommandGroup>\\n *   </CommandList>\\n * </Command>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-command Command Docs} for further information.\\n */\\nexport const Command = forwardRef<\\n  React.ElementRef<typeof CMDK>,\\n  React.ComponentPropsWithoutRef<typeof CMDK>\\n>(({ className, ...props }, ref) => (\\n  <CMDK ref={ref} className={base({ className })} {...props} />\\n));\\n\\nCommand.displayName = CMDK.displayName;\\n\\n/**\\n * CommandDialog component that wraps the Command component in a dialog.\\n *\\n * @param {DialogProps} props - The props for the CommandDialog component.\\n *\\n * @example\\n * ```tsx\\n * <CommandDialog>\\n *   <Command>...</Command>\\n * </CommandDialog>\\n * ```\\n */\\nexport const CommandDialog = ({ children, ...props }: DialogProps) => {\\n  return (\\n    <Dialog {...props}>\\n      <DialogContent className={dialogContent()}>\\n        <Command className={dialogCommand()}>{children}</Command>\\n      </DialogContent>\\n    </Dialog>\\n  );\\n};\\n\\ntype CommandInputRef = React.ElementRef<typeof CMDKInput>;\\ntype CommandInputProps = React.ComponentPropsWithoutRef<typeof CMDKInput>;\\n\\n/**\\n * CommandInput component that allows users to input commands or search terms.\\n *\\n * @param {CommandInputProps} props - The props for the CommandInput component.\\n *\\n * @example\\n * ```tsx\\n * <CommandInput placeholder='Type a command or search...' />\\n * ```\\n */\\nexport const CommandInput = forwardRef<CommandInputRef, CommandInputProps>(\\n  ({ className, ...props }, ref) => (\\n    <div className={inputWrapper()} cmdk-input-wrapper=''>\\n      <MagnifyingGlassIcon className={inputIcon()} />\\n      <CMDKInput ref={ref} className={input({ className })} {...props} />\\n    </div>\\n  ),\\n);\\n\\nCommandInput.displayName = CMDKInput.displayName;\\n\\ntype CommandListRef = React.ElementRef<typeof CMDKList>;\\ntype CommandListProps = React.ComponentPropsWithoutRef<typeof CMDKList>;\\n\\n/**\\n * CommandList component that wraps the list of command items.\\n *\\n * @param {CommandListProps} props - The props for the CommandList component.\\n *\\n * @example\\n * ```tsx\\n * <CommandList>\\n *   <CommandItem>...</CommandItem>\\n * </CommandList>\\n * ```\\n */\\nexport const CommandList = forwardRef<CommandListRef, CommandListProps>(\\n  ({ className, ...props }, ref) => (\\n    <CMDKList ref={ref} className={list({ className })} {...props} />\\n  ),\\n);\\n\\nCommandList.displayName = CMDKList.displayName;\\n\\ntype CommandEmptyRef = React.ElementRef<typeof CMDKEmpty>;\\ntype CommandEmptyProps = React.ComponentPropsWithoutRef<typeof CMDKEmpty>;\\n\\n/**\\n * CommandEmpty component that displays a message when no results are found.\\n *\\n * @param {CommandEmptyProps} props - The props for the CommandEmpty component.\\n *\\n * @example\\n * ```tsx\\n * <CommandEmpty>No results found.</CommandEmpty>\\n * ```\\n */\\nexport const CommandEmpty = forwardRef<CommandEmptyRef, CommandEmptyProps>(\\n  ({ className, ...props }, ref) => (\\n    <CMDKEmpty ref={ref} className={empty({ className })} {...props} />\\n  ),\\n);\\n\\nCommandEmpty.displayName = CMDKEmpty.displayName;\\n\\ntype CommandGroupRef = React.ElementRef<typeof CMDKGroup>;\\ntype CommandGroupProps = React.ComponentPropsWithoutRef<typeof CMDKGroup>;\\n\\n/**\\n * CommandGroup component that groups related command items.\\n *\\n * @param {CommandGroupProps} props - The props for the CommandGroup component.\\n *\\n * @example\\n * ```tsx\\n * <CommandGroup heading='Suggestions'>\\n *   <CommandItem>...</CommandItem>\\n * </CommandGroup>\\n * ```\\n */\\nexport const CommandGroup = forwardRef<CommandGroupRef, CommandGroupProps>(\\n  ({ className, ...props }, ref) => (\\n    <CMDKGroup ref={ref} className={group({ className })} {...props} />\\n  ),\\n);\\n\\nCommandGroup.displayName = CMDKGroup.displayName;\\n\\ntype CommandItemRef = React.ElementRef<typeof CMDKItem>;\\ntype CommandItemProps = React.ComponentPropsWithoutRef<typeof CMDKItem>;\\n\\n/**\\n * CommandItem component that represents a single item in the command list.\\n *\\n * @param {CommandItemProps} props - The props for the CommandItem component.\\n *\\n * @example\\n * ```tsx\\n * <CommandItem>...</CommandItem>\\n * ```\\n */\\nexport const CommandItem = forwardRef<CommandItemRef, CommandItemProps>(\\n  ({ className, ...props }, ref) => (\\n    <CMDKItem ref={ref} className={item({ className })} {...props} />\\n  ),\\n);\\n\\nCommandItem.displayName = CMDKItem.displayName;\\n\\ntype CommandShortcutProps = React.HTMLAttributes<HTMLSpanElement>;\\n\\n/**\\n * CommandShortcut component that displays a keyboard shortcut for a command item.\\n *\\n * @param {CommandShortcutProps} props - The props for the CommandShortcut component.\\n *\\n * @example\\n * ```tsx\\n * <CommandShortcut>âŒ˜K</CommandShortcut>\\n * ```\\n */\\nexport const CommandShortcut = ({\\n  className,\\n  ...props\\n}: CommandShortcutProps) => {\\n  return <span className={shortcut({ className })} {...props} />;\\n};\\n\\ntype CommandSeparatorRef = React.ElementRef<typeof CMDKSeparator>;\\ntype CommandSeparatorProps = React.ComponentPropsWithoutRef<\\n  typeof CMDKSeparator\\n>;\\n\\n/**\\n * CommandSeparator component that visually separates command items.\\n *\\n * @param {CommandSeparatorProps} props - The props for the CommandSeparator component.\\n *\\n * @example\\n * ```tsx\\n * <CommandSeparator />\\n * ```\\n */\\nexport const CommandSeparator = forwardRef<\\n  CommandSeparatorRef,\\n  CommandSeparatorProps\\n>(({ className, ...props }, ref) => (\\n  <CMDKSeparator ref={ref} className={separator({ className })} {...props} />\\n));\\n\\nCommandSeparator.displayName = CMDKSeparator.displayName;\\n"
}
