{
  "name": "input-otp",
  "type": "component:ui",
  "dependencies": ["input-otp"],
  "content": "import type { SlotProps } from 'input-otp';\\nimport { forwardRef } from 'react';\\nimport { DashIcon } from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { OTPInput } from 'input-otp';\\nimport { tv } from 'tailwind-variants';\\n\\nconst inputOTPStyles = tv({\\n  slots: {\\n    base: 'flex items-center gap-2',\\n    group: 'flex items-center',\\n    slot: clsx(\\n      'relative flex h-9 w-9 items-center justify-center border-y border-r border-grey-border text-sm shadow-sm transition-all',\\n      'first:rounded-l-lg first:border-l',\\n      'last:rounded-r-lg',\\n    ),\\n    slotFakeCaretWraper:\\n      'pointer-events-none absolute inset-0 flex items-center justify-center',\\n    slotFakeCaret:\\n      'h-4 w-px animate-caret-blink bg-grey-text-contrast duration-1000',\\n  },\\n  variants: {\\n    active: {\\n      true: {\\n        slot: 'z-10 ring-3 ring-grey-focus-ring',\\n      },\\n    },\\n  },\\n});\\n\\nconst { base, group, slot, slotFakeCaretWraper, slotFakeCaret } =\\n  inputOTPStyles();\\n\\ntype InputOTPRef = React.ElementRef<typeof OTPInput>;\\ntype InputOTPProps = React.ComponentPropsWithoutRef<typeof OTPInput>;\\n\\n/**\\n * InputOTP component that renders an OTP input field.\\n *\\n * @param {InputOTPProps} props - The props for the InputOTP component.\\n *\\n * @example\\n * <InputOTP\\n *   maxLength={6}\\n *   render={({ slots }) => (\\n *     <>\\n *       <InputOTPGroup>\\n *         {slots.slice(0, 3).map((slot, index) => (\\n *           <InputOTPSlot key={index} {...slot} />\\n *         ))}\\n *       </InputOTPGroup>\\n *       <InputOTPSeparator />\\n *       <InputOTPGroup>\\n *         {slots.slice(3).map((slot, index) => (\\n *           <InputOTPSlot key={index + 3} {...slot} />\\n *         ))}\\n *       </InputOTPGroup>\\n *     </>\\n *   )}\\n * />\\n *\\n * @see {@link https://dub.sh/ui-input-otp InputOTP Docs} for further information.\\n */\\nexport const InputOTP = forwardRef<InputOTPRef, InputOTPProps>(\\n  ({ className, ...props }, ref) => (\\n    <OTPInput ref={ref} containerClassName={base({ className })} {...props} />\\n  ),\\n);\\n\\nInputOTP.displayName = 'InputOTP';\\n\\ntype InputOTPGroupRef = React.ElementRef<'div'>;\\ntype InputOTPGroupProps = React.ComponentPropsWithoutRef<'div'>;\\n\\n/**\\n * InputOTPGroup component that wraps a group of OTP input slots.\\n *\\n * @param {InputOTPGroupProps} props - The props for the InputOTPGroup component.\\n *\\n * @example\\n * <InputOTPGroup>\\n *   {Your input slots here}\\n * </InputOTPGroup>\\n */\\nexport const InputOTPGroup = forwardRef<InputOTPGroupRef, InputOTPGroupProps>(\\n  ({ className, ...props }, ref) => (\\n    <div ref={ref} className={group({ className })} {...props} />\\n  ),\\n);\\n\\nInputOTPGroup.displayName = 'InputOTPGroup';\\n\\ntype InputOTPSlotRef = React.ElementRef<'div'>;\\ntype InputOTPSlotProps = SlotProps & React.ComponentPropsWithoutRef<'div'>;\\n\\n/**\\n * InputOTPSlot component that represents a single slot in the OTP input.\\n *\\n * @param {InputOTPSlotProps} props - The props for the InputOTPSlot component.\\n *\\n * @example\\n * <InputOTPSlot />\\n */\\nexport const InputOTPSlot = forwardRef<InputOTPSlotRef, InputOTPSlotProps>(\\n  ({ char, hasFakeCaret, isActive, className, ...props }, ref) => {\\n    return (\\n      <div\\n        ref={ref}\\n        className={slot({ className, active: isActive })}\\n        {...props}\\n      >\\n        {char}\\n        {hasFakeCaret && (\\n          <div className={slotFakeCaretWraper()}>\\n            <div className={slotFakeCaret()} />\\n          </div>\\n        )}\\n      </div>\\n    );\\n  },\\n);\\n\\nInputOTPSlot.displayName = 'InputOTPSlot';\\n\\ntype InputOTPSeparatorRef = React.ElementRef<'div'>;\\ntype InputOTPSeparatorProps = React.ComponentPropsWithoutRef<'div'>;\\n\\n/**\\n * InputOTPSeparator component that visually separates OTP input groups.\\n *\\n * @param {InputOTPSeparatorProps} props - The props for the InputOTPSeparator component.\\n *\\n * @example\\n * <InputOTPSeparator />\\n */\\nexport const InputOTPSeparator = forwardRef<\\n  InputOTPSeparatorRef,\\n  InputOTPSeparatorProps\\n>(({ ...props }, ref) => (\\n  <div ref={ref} role='separator' {...props}>\\n    <DashIcon />\\n  </div>\\n));\\n\\nInputOTPSeparator.displayName = 'InputOTPSeparator';\\n"
}
