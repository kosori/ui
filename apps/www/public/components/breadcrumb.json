{
  "name": "breadcrumb",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-slot"],
  "content": "import { forwardRef } from 'react';\\nimport { ChevronRightIcon, DotsHorizontalIcon } from '@radix-ui/react-icons';\\nimport { Slot } from '@radix-ui/react-slot';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst breadcrumbStyles = tv({\\n  slots: {\\n    list: clsx(\\n      'flex flex-wrap items-center gap-1.5 break-words text-sm text-grey-text',\\n      'sm:gap-2.5',\\n    ),\\n    item: 'inline-flex items-center gap-1.5',\\n    link: clsx('transition-colors', 'hover:text-grey-text-contrast'),\\n    separator: '[&>svg]:size-3.5',\\n    page: 'font-normal text-grey-text-contrast',\\n    ellipsis: 'flex size-9 items-center justify-center',\\n    ellipsisIcon: 'size-4',\\n  },\\n});\\n\\nconst { list, item, link, separator, page, ellipsis, ellipsisIcon } =\\n  breadcrumbStyles();\\n\\ntype BreadcrumbRef = HTMLElement;\\ntype BreadcrumbProps = React.ComponentPropsWithoutRef<'nav'>;\\n\\n/**\\n * Breadcrumb component that serves as a navigation aid, indicating the current page's location within a hierarchy.\\n *\\n * @param {BreadcrumbProps} props - The props for the Breadcrumb component.\\n *\\n * @example\\n * ```tsx\\n * <Breadcrumb>\\n *   <BreadcrumbList>\\n *     <BreadcrumbItem>\\n *       <BreadcrumbLink href='/'>Home</BreadcrumbLink>\\n *     </BreadcrumbItem>\\n *     <BreadcrumbSeparator />\\n *     <BreadcrumbEllipsis className='size-4' />\\n *     <BreadcrumbItem>\\n *       <BreadcrumbLink href='/docs/ui'>UI</BreadcrumbLink>\\n *     </BreadcrumbItem>\\n *     <BreadcrumbSeparator />\\n *     <BreadcrumbItem>\\n *       <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\\n *     </BreadcrumbItem>\\n *   </BreadcrumbList>\\n * </Breadcrumb>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-breadcrumb Breadcrumb Docs} for further information.\\n */\\nexport const Breadcrumb = forwardRef<BreadcrumbRef, BreadcrumbProps>(\\n  ({ ...props }, ref) => <nav ref={ref} aria-label='breadcrumb' {...props} />,\\n);\\n\\nBreadcrumb.displayName = 'Breadcrumb';\\n\\ntype BreadcrumbListRef = HTMLOListElement;\\ntype BreadcrumbListProps = React.ComponentPropsWithoutRef<'ol'>;\\n\\n/**\\n * BreadcrumbList component that wraps the list of breadcrumb items.\\n *\\n * @param {BreadcrumbListProps} props - Additional props to pass to the BreadcrumbList component.\\n * ```tsx\\n * <BreadcrumbList>\\n *   <BreadcrumbItem>\\n *     <BreadcrumbLink href='/'>Home</BreadcrumbLink>\\n *   </BreadcrumbItem>\\n * </BreadcrumbList>\\n * ```\\n */\\nexport const BreadcrumbList = forwardRef<\\n  BreadcrumbListRef,\\n  BreadcrumbListProps\\n>(({ className, ...props }, ref) => (\\n  <ol ref={ref} className={list({ className })} {...props} />\\n));\\n\\nBreadcrumbList.displayName = 'BreadcrumbList';\\n\\ntype BreadcrumbItemRef = HTMLLIElement;\\ntype BreadcrumbItemProps = React.ComponentPropsWithoutRef<'li'>;\\n\\n/**\\n * BreadcrumbItem component that represents a single item in the breadcrumb trail.\\n *\\n * @param {BreadcrumbItemProps} props - Additional props to pass to the BreadcrumbItem component.\\n *\\n * @example\\n * ```tsx\\n * <BreadcrumbItem>\\n *   <BreadcrumbLink href='/'>Home</BreadcrumbLink>\\n * </BreadcrumbItem>\\n * ```\\n */\\nexport const BreadcrumbItem = forwardRef<\\n  BreadcrumbItemRef,\\n  BreadcrumbItemProps\\n>(({ className, ...props }, ref) => (\\n  <li ref={ref} className={item({ className })} {...props} />\\n));\\n\\nBreadcrumbItem.displayName = 'BreadcrumbItem';\\n\\ntype BreadcrumbLinkRef = HTMLAnchorElement;\\ntype BreadcrumbLinkProps = React.ComponentPropsWithoutRef<'a'> & {\\n  asChild?: boolean;\\n};\\n\\n/**\\n * BreadcrumbLink component that serves as a clickable link within the breadcrumb.\\n *\\n * @param {BreadcrumbLinkProps} props - Additional props to pass to the BreadcrumbLink component.\\n *\\n * @example\\n * ```tsx\\n * <BreadcrumbLink href='/'>Home</BreadcrumbLink>\\n * ```\\n */\\nexport const BreadcrumbLink = forwardRef<\\n  BreadcrumbLinkRef,\\n  BreadcrumbLinkProps\\n>(({ asChild, className, ...props }, ref) => {\\n  const Comp = asChild ? Slot : 'a';\\n\\n  return <Comp ref={ref} className={link({ className })} {...props} />;\\n});\\n\\nBreadcrumbLink.displayName = 'BreadcrumbLink';\\n\\ntype BreadcrumbSeparatorProps = React.ComponentPropsWithoutRef<'li'>;\\n\\n/**\\n * BreadcrumbSeparator component that visually separates breadcrumb items.\\n *\\n * @param {BreadcrumbSeparatorProps} props - Additional props to pass to the BreadcrumbSeparator component.\\n *\\n * @example\\n * ```tsx\\n * <BreadcrumbSeparator />\\n * ```\\n */\\nexport const BreadcrumbSeparator = ({\\n  children,\\n  className,\\n  ...props\\n}: BreadcrumbSeparatorProps) => (\\n  <li\\n    aria-hidden='true'\\n    className={separator({ className })}\\n    role='presentation'\\n    {...props}\\n  >\\n    {children ?? <ChevronRightIcon />}\\n  </li>\\n);\\n\\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\\n\\ntype BreadcrumbPageRef = HTMLSpanElement;\\ntype BreadcrumbPageProps = React.ComponentPropsWithoutRef<'span'>;\\n\\n/**\\n * BreadcrumbPage component that indicates the current page in the breadcrumb trail.\\n *\\n * @param {BreadcrumbPageProps} props - Additional props to pass to the BreadcrumbPage component.\\n *\\n * @example\\n * ```tsx\\n * <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\\n * ```\\n */\\nexport const BreadcrumbPage = forwardRef<\\n  BreadcrumbPageRef,\\n  BreadcrumbPageProps\\n>(({ className, ...props }, ref) => (\\n  <span\\n    ref={ref}\\n    aria-current='page'\\n    aria-disabled='true'\\n    className={page({ className })}\\n    role='link'\\n    {...props}\\n  />\\n));\\n\\nBreadcrumbPage.displayName = 'BreadcrumbPage';\\n\\ntype BreadcrumbEllipsisProps = React.ComponentProps<'span'>;\\n\\n/**\\n * BreadcrumbEllipsis component that indicates more items in the breadcrumb trail.\\n *\\n * @param {BreadcrumbEllipsisProps} props - Additional props to pass to the BreadcrumbEllipsis component.\\n *\\n * @example\\n * ```tsx\\n * <BreadcrumbEllipsis />\\n * ```\\n */\\nexport const BreadcrumbEllipsis = ({\\n  className,\\n  ...props\\n}: BreadcrumbEllipsisProps) => (\\n  <span\\n    aria-hidden='true'\\n    className={ellipsis({ className })}\\n    role='presentation'\\n    {...props}\\n  >\\n    <DotsHorizontalIcon className={ellipsisIcon()} />\\n    <span className='sr-only'>More</span>\\n  </span>\\n);\\n\\nBreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';\\n"
}
