{
  "name": "alert-dialog",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-alert-dialog"],
  "content": "'use client';\\n\\nimport type { AlertDialogPortalProps } from '@radix-ui/react-alert-dialog';\\nimport { forwardRef } from 'react';\\nimport {\\n  Action,\\n  Cancel,\\n  Content,\\n  Description,\\n  Overlay,\\n  Portal,\\n  Root,\\n  Title,\\n  Trigger,\\n} from '@radix-ui/react-alert-dialog';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nimport type { ButtonProps } from '@kosori/ui/button';\\nimport { buttonStyles } from '@kosori/ui/button';\\n\\nconst alertDialogStyles = tv({\\n  slots: {\\n    overlay: clsx(\\n      'fixed inset-0 z-50 bg-black-a6 backdrop-blur-sm',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0',\\n    ),\\n    content: clsx(\\n      'fixed inset-1/2 z-50 grid h-fit w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border border-grey-line bg-grey-base p-6 shadow-md duration-200',\\n      'sm:rounded-lg',\\n      'md:w-full',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]',\\n    ),\\n    header: clsx('flex flex-col space-y-2', 'first-letter:sm:text-left'),\\n    title: 'text-lg font-semibold',\\n    description: 'text-sm text-grey-text',\\n    footer: clsx(\\n      'flex flex-col-reverse',\\n      'sm:flex-row sm:justify-end sm:space-x-2',\\n    ),\\n  },\\n});\\n\\nconst { overlay, content, header, title, description, footer } =\\n  alertDialogStyles();\\n\\n/**\\n * AlertDialog component that displays a modal dialog for user confirmation or alerts.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - Additional props to pass to the alert dialog.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialog>\\n *   <AlertDialogTrigger>Open Alert</AlertDialogTrigger>\\n *   <AlertDialogContent>\\n *     <AlertDialogHeader>\\n *       <AlertDialogTitle>Confirm Action</AlertDialogTitle>\\n *       <AlertDialogDescription>\\n *         Are you sure you want to proceed with this action?\\n *       </AlertDialogDescription>\\n *     </AlertDialogHeader>\\n *     <AlertDialogFooter>\\n *       <AlertDialogCancel>Cancel</AlertDialogCancel>\\n *       <AlertDialogAction>Confirm</AlertDialogAction>\\n *     </AlertDialogFooter>\\n *   </AlertDialogContent>\\n * </AlertDialog>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-alert-dialog Alert Dialog Docs} for further information.\\n */\\nexport const AlertDialog = Root;\\n\\n/**\\n * AlertDialogTrigger component for the AlertDialog that activates the dialog when clicked.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Trigger>} props - Additional props to pass to the alert dialog trigger.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogTrigger>Open Alert</AlertDialogTrigger>\\n * ```\\n */\\nexport const AlertDialogTrigger = Trigger;\\n\\n/**\\n * AlertDialogPortal component for rendering the AlertDialog in a separate part of the DOM.\\n *\\n * @param {AlertDialogPortalProps} props - Additional props to pass to the alert dialog portal.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogPortal>\\n *   <AlertDialogOverlay />\\n *   <AlertDialogContent>...</AlertDialogContent>\\n * </AlertDialogPortal>\\n * ```\\n */\\nexport const AlertDialogPortal = ({\\n  children,\\n  ...props\\n}: AlertDialogPortalProps) => <Portal {...props}>{children}</Portal>;\\n\\nAlertDialogPortal.displayName = Portal.displayName;\\n\\ntype AlertDialogOverlayRef = React.ElementRef<typeof Overlay>;\\ntype AlertDialogOverlayProps = React.ComponentPropsWithoutRef<typeof Overlay>;\\n\\n/**\\n * AlertDialogOverlay component that covers the background when the AlertDialog is open.\\n *\\n * @param {AlertDialogOverlayProps} props - Additional props to pass to the alert dialog overlay.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogOverlay />\\n * ```\\n */\\nexport const AlertDialogOverlay = forwardRef<\\n  AlertDialogOverlayRef,\\n  AlertDialogOverlayProps\\n>(({ className, ...props }, ref) => (\\n  <Overlay ref={ref} className={overlay({ className })} {...props} />\\n));\\n\\nAlertDialogOverlay.displayName = Overlay.displayName;\\n\\ntype AlertDialogContentRef = React.ElementRef<typeof Content>;\\ntype AlertDialogContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * AlertDialogContent component for the AlertDialog that contains the main dialog content.\\n *\\n * @param {AlertDialogContentProps} props - Additional props to pass to the alert dialog content.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogContent>\\n *   <AlertDialogTitle>Confirm Action</AlertDialogTitle>\\n *   <AlertDialogDescription>\\n *     Are you sure you want to proceed with this action?\\n *   </AlertDialogDescription>\\n * </AlertDialogContent>\\n * ```\\n */\\nexport const AlertDialogContent = forwardRef<\\n  AlertDialogContentRef,\\n  AlertDialogContentProps\\n>(({ className, ...props }, ref) => (\\n  <AlertDialogPortal>\\n    <AlertDialogOverlay />\\n    <Content ref={ref} className={content({ className })} {...props} />\\n  </AlertDialogPortal>\\n));\\n\\nAlertDialogContent.displayName = Content.displayName;\\n\\ntype AlertDialogCancelRef = React.ElementRef<typeof Cancel>;\\ntype AlertDialogRadixCancelProps = React.ComponentPropsWithoutRef<\\n  typeof Cancel\\n>;\\ntype AlertDialogCancelProps = object &\\n  AlertDialogRadixCancelProps &\\n  ButtonProps;\\n\\n/**\\n * AlertDialogCancel button component for the AlertDialog that closes the dialog without taking action.\\n *\\n * @param {AlertDialogCancelProps} props - Additional props to pass to the cancel button.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogCancel>Cancel</AlertDialogCancel>\\n * ```\\n */\\nexport const AlertDialogCancel = forwardRef<\\n  AlertDialogCancelRef,\\n  AlertDialogCancelProps\\n>(({ variant = 'outline', intent, size, icon, className, ...props }, ref) => (\\n  <Cancel\\n    ref={ref}\\n    className={buttonStyles({\\n      variant,\\n      intent,\\n      size,\\n      icon,\\n      className,\\n    })}\\n    {...props}\\n  />\\n));\\n\\nAlertDialogCancel.displayName = Cancel.displayName;\\n\\ntype AlertDialogActionRef = React.ElementRef<typeof Action>;\\ntype AlertDialogRadixActionProps = React.ComponentPropsWithoutRef<\\n  typeof Action\\n>;\\ntype AlertDialogActionProps = object &\\n  AlertDialogRadixActionProps &\\n  ButtonProps;\\n\\n/**\\n * AlertDialogAction button component for the AlertDialog that confirms the action.\\n *\\n * @param {AlertDialogActionProps} props - Additional props to pass to the action button.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogAction>Confirm</AlertDialogAction>\\n * ```\\n */\\nexport const AlertDialogAction = forwardRef<\\n  AlertDialogActionRef,\\n  AlertDialogActionProps\\n>(({ variant, intent, size, icon, className, ...props }, ref) => (\\n  <Action\\n    ref={ref}\\n    className={buttonStyles({\\n      variant,\\n      intent,\\n      size,\\n      icon,\\n      className,\\n    })}\\n    {...props}\\n  />\\n));\\n\\nAlertDialogAction.displayName = Action.displayName;\\n\\ntype AlertDialogHeaderProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * AlertDialogHeader component for the AlertDialog that contains the title and description.\\n *\\n * @param {AlertDialogHeaderProps} props - Additional props to pass to the alert dialog header.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogHeader>\\n *   <AlertDialogTitle>Confirm Action</AlertDialogTitle>\\n *   <AlertDialogDescription>\\n *     Are you sure you want to proceed with this action?\\n *   </AlertDialogDescription>\\n * </AlertDialogHeader>\\n * ```\\n */\\nexport const AlertDialogHeader = ({\\n  className,\\n  ...props\\n}: AlertDialogHeaderProps) => (\\n  <div className={header({ className })} {...props} />\\n);\\n\\nAlertDialogHeader.displayName = 'AlertDialogHeader';\\n\\ntype AlertDialogTitleRef = React.ElementRef<typeof Title>;\\ntype AlertDialogTitleProps = React.ComponentPropsWithoutRef<typeof Title>;\\n\\n/**\\n * AlertDialogTitle component for the AlertDialog that displays the dialog title.\\n *\\n * @param {AlertDialogTitleProps} props - Additional props to pass to the alert dialog title.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogTitle>Confirm Action</AlertDialogTitle>\\n * ```\\n */\\nexport const AlertDialogTitle = forwardRef<\\n  AlertDialogTitleRef,\\n  AlertDialogTitleProps\\n>(({ className, ...props }, ref) => (\\n  <Title ref={ref} className={title({ className })} {...props} />\\n));\\n\\nAlertDialogTitle.displayName = Title.displayName;\\n\\ntype AlertDialogDescriptionRef = React.ElementRef<typeof Description>;\\ntype AlertDialogDescriptionProps = React.ComponentPropsWithoutRef<\\n  typeof Description\\n>;\\n\\n/**\\n * AlertDialogDescription component for the AlertDialog that provides additional information.\\n *\\n * @param {AlertDialogDescriptionProps} props - Additional props to pass to the alert dialog description.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogDescription>\\n *   Are you sure you want to proceed with this action?\\n * </AlertDialogDescription>\\n * ```\\n */\\nexport const AlertDialogDescription = forwardRef<\\n  AlertDialogDescriptionRef,\\n  AlertDialogDescriptionProps\\n>(({ className, ...props }, ref) => (\\n  <Description ref={ref} className={description({ className })} {...props} />\\n));\\n\\nAlertDialogDescription.displayName = Description.displayName;\\n\\ntype AlertDialogFooterProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * AlertDialogFooter component for the AlertDialog that contains action buttons.\\n *\\n * @param {AlertDialogFooterProps} props - Additional props to pass to the alert dialog footer.\\n *\\n * @example\\n * ```tsx\\n * <AlertDialogFooter>\\n *   <AlertDialogCancel>Cancel</AlertDialogCancel>\\n *   <AlertDialogAction>Confirm</AlertDialogAction>\\n * </AlertDialogFooter>\\n * ```\\n */\\nexport const AlertDialogFooter = ({\\n  className,\\n  ...props\\n}: AlertDialogFooterProps) => (\\n  <div className={footer({ className })} {...props} />\\n);\\n\\nAlertDialogFooter.displayName = 'AlertDialogFooter';\\n"
}
