{
  "name": "carousel",
  "type": "component:ui",
  "dependencies": ["embla-carousel-react"],
  "content": "'use client';\\n\\nimport type { UseEmblaCarouselType } from 'embla-carousel-react';\\nimport {\\n  createContext,\\n  forwardRef,\\n  useCallback,\\n  useContext,\\n  useEffect,\\n  useState,\\n} from 'react';\\nimport { ArrowLeftIcon, ArrowRightIcon } from '@radix-ui/react-icons';\\nimport useEmblaCarousel from 'embla-carousel-react';\\nimport { tv } from 'tailwind-variants';\\n\\nimport { Button } from '@kosori/ui/button';\\n\\nconst carouselStyles = tv({\\n  slots: {\\n    base: 'relative',\\n    content: 'flex',\\n    item: 'min-w-0 shrink-0 grow-0 basis-full',\\n    next: 'absolute rounded-full',\\n    previous: 'absolute rounded-full',\\n  },\\n  variants: {\\n    orientation: {\\n      horizontal: {\\n        content: '-ml-4',\\n        item: 'pl-4',\\n        next: '-right-12 top-1/2 -translate-y-1/2',\\n        previous: '-left-12 top-1/2 -translate-y-1/2',\\n      },\\n      vertical: {\\n        content: '-mt-4 flex-col',\\n        item: 'pt-4',\\n        next: '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\\n        previous: '-top-12 left-1/2 -translate-x-1/2 rotate-90',\\n      },\\n    },\\n  },\\n});\\n\\nconst { base, content, item, next, previous } = carouselStyles();\\n\\ntype CarouselContextProps = {\\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\\n  api: ReturnType<typeof useEmblaCarousel>[1];\\n  scrollPrev: () => void;\\n  scrollNext: () => void;\\n  canScrollPrev: boolean;\\n  canScrollNext: boolean;\\n} & CarouselProps;\\n\\nexport const CarouselContext = createContext<CarouselContextProps | null>(null);\\n\\nexport const useCarousel = () => {\\n  const context = useContext(CarouselContext);\\n\\n  if (!context) {\\n    throw new Error('useCarousel must be used within a <Carousel />');\\n  }\\n\\n  return context;\\n};\\n\\nexport type CarouselApi = UseEmblaCarouselType[1];\\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\\ntype CarouselOptions = UseCarouselParameters[0];\\ntype CarouselPlugin = UseCarouselParameters[1];\\n\\nexport type CarouselProps = {\\n  opts?: CarouselOptions;\\n  plugins?: CarouselPlugin;\\n  orientation?: 'horizontal' | 'vertical';\\n  setApi?: (api: CarouselApi) => void;\\n};\\n\\n/**\\n * Carousel component that provides a sliding interface for displaying content.\\n *\\n * @param {CarouselProps} props - The props for the Carousel component.\\n * @param {CarouselOptions} [opts] - Options for the carousel.\\n * @param {CarouselPlugin} [plugins] - Plugins for the carousel.\\n * @param {'horizontal' | 'vertical'} [orientation='horizontal'] - Orientation of the carousel.\\n * @param {(api: CarouselApi) => void} [setApi] - Callback to set the carousel API.\\n *\\n * @example\\n * <Carousel>\\n *   <CarouselContent>\\n *     <CarouselItem>...</CarouselItem>\\n *     <CarouselItem>...</CarouselItem>\\n *     <CarouselItem>...</CarouselItem>\\n *   </CarouselContent>\\n *   <CarouselPrevious />\\n *   <CarouselNext />\\n * </Carousel>\\n *\\n * @see {@link https://dub.sh/ui-carousel Carousel Docs} for further information.\\n */\\nexport const Carousel = forwardRef<\\n  HTMLDivElement,\\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\\n>(\\n  (\\n    {\\n      orientation = 'horizontal',\\n      opts,\\n      setApi,\\n      plugins,\\n      className,\\n      children,\\n      ...props\\n    },\\n    ref,\\n  ) => {\\n    const [carouselRef, api] = useEmblaCarousel(\\n      {\\n        ...opts,\\n        axis: orientation === 'horizontal' ? 'x' : 'y',\\n      },\\n      plugins,\\n    );\\n    const [canScrollPrev, setCanScrollPrev] = useState(false);\\n    const [canScrollNext, setCanScrollNext] = useState(false);\\n\\n    const onSelect = useCallback((api: CarouselApi) => {\\n      if (!api) {\\n        return;\\n      }\\n\\n      setCanScrollPrev(api.canScrollPrev());\\n      setCanScrollNext(api.canScrollNext());\\n    }, []);\\n\\n    const scrollPrev = useCallback(() => {\\n      api?.scrollPrev();\\n    }, [api]);\\n\\n    const scrollNext = useCallback(() => {\\n      api?.scrollNext();\\n    }, [api]);\\n\\n    const handleKeyDown = useCallback(\\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\\n        if (event.key === 'ArrowLeft') {\\n          event.preventDefault();\\n          scrollPrev();\\n        } else if (event.key === 'ArrowRight') {\\n          event.preventDefault();\\n          scrollNext();\\n        }\\n      },\\n      [scrollPrev, scrollNext],\\n    );\\n\\n    useEffect(() => {\\n      if (!api || !setApi) {\\n        return;\\n      }\\n\\n      setApi(api);\\n    }, [api, setApi]);\\n\\n    useEffect(() => {\\n      if (!api) {\\n        return;\\n      }\\n\\n      onSelect(api);\\n      api.on('reInit', onSelect);\\n      api.on('select', onSelect);\\n\\n      return () => {\\n        api.off('select', onSelect);\\n      };\\n    }, [api, onSelect]);\\n\\n    return (\\n      <CarouselContext.Provider\\n        value={{\\n          carouselRef,\\n          api: api,\\n          opts,\\n          orientation,\\n          scrollPrev,\\n          scrollNext,\\n          canScrollPrev,\\n          canScrollNext,\\n        }}\\n      >\\n        <div\\n          ref={ref}\\n          aria-roledescription='carousel'\\n          className={base({ className })}\\n          role='region'\\n          onKeyDownCapture={handleKeyDown}\\n          {...props}\\n        >\\n          {children}\\n        </div>\\n      </CarouselContext.Provider>\\n    );\\n  },\\n);\\n\\nCarousel.displayName = 'Carousel';\\n\\n/**\\n * CarouselContent component that wraps the content of the Carousel.\\n *\\n * @param {React.HTMLAttributes<HTMLDivElement>} props - Additional props to pass to the CarouselContent component.\\n *\\n * @example\\n * <CarouselContent>\\n *   <CarouselItem>...</CarouselItem>\\n * </CarouselContent>\\n */\\nexport const CarouselContent = forwardRef<\\n  HTMLDivElement,\\n  React.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => {\\n  const { carouselRef, orientation } = useCarousel();\\n\\n  return (\\n    <div ref={carouselRef} className='overflow-hidden'>\\n      <div\\n        ref={ref}\\n        className={content({ className, orientation })}\\n        {...props}\\n      />\\n    </div>\\n  );\\n});\\n\\nCarouselContent.displayName = 'CarouselContent';\\n\\n/**\\n * CarouselItem component that represents a single item in the Carousel.\\n *\\n * @param {React.HTMLAttributes<HTMLDivElement>} props - Additional props to pass to the CarouselItem component.\\n *\\n * @example\\n * <CarouselItem>...</CarouselItem>\\n */\\nexport const CarouselItem = forwardRef<\\n  HTMLDivElement,\\n  React.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => {\\n  const { orientation } = useCarousel();\\n\\n  return (\\n    <div\\n      ref={ref}\\n      aria-roledescription='slide'\\n      className={item({ className, orientation })}\\n      role='group'\\n      {...props}\\n    />\\n  );\\n});\\n\\nCarouselItem.displayName = 'CarouselItem';\\n\\n/**\\n * CarouselNext component that provides a button to navigate to the next item in the Carousel.\\n *\\n * @param {React.ComponentProps<typeof Button>} props - Additional props to pass to the CarouselNext component.\\n *\\n * @example\\n * <CarouselNext />\\n */\\nexport const CarouselNext = forwardRef<\\n  HTMLButtonElement,\\n  React.ComponentProps<typeof Button>\\n>(\\n  (\\n    { className, icon = true, size = 'small', variant = 'outline', ...props },\\n    ref,\\n  ) => {\\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\\n\\n    return (\\n      <Button\\n        ref={ref}\\n        className={next({ className, orientation })}\\n        disabled={!canScrollNext}\\n        icon={icon}\\n        size={size}\\n        variant={variant}\\n        onClick={scrollNext}\\n        {...props}\\n      >\\n        <ArrowRightIcon />\\n        <span className='sr-only'>Next slide</span>\\n      </Button>\\n    );\\n  },\\n);\\n\\n/**\\n * CarouselPrevious component that provides a button to navigate to the previous item in the Carousel.\\n *\\n * @param {React.ComponentProps<typeof Button>} props - Additional props to pass to the CarouselPrevious component.\\n *\\n * @example\\n * <CarouselPrevious />\\n */\\nexport const CarouselPrevious = forwardRef<\\n  HTMLButtonElement,\\n  React.ComponentProps<typeof Button>\\n>(\\n  (\\n    { className, icon = true, size = 'small', variant = 'outline', ...props },\\n    ref,\\n  ) => {\\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\\n\\n    return (\\n      <Button\\n        ref={ref}\\n        className={previous({ className, orientation })}\\n        disabled={!canScrollPrev}\\n        icon={icon}\\n        size={size}\\n        variant={variant}\\n        onClick={scrollPrev}\\n        {...props}\\n      >\\n        <ArrowLeftIcon />\\n        <span className='sr-only'>Previous slide</span>\\n      </Button>\\n    );\\n  },\\n);\\n\\nCarouselPrevious.displayName = 'CarouselPrevious';\\n"
}
