{
  "name": "alert",
  "type": "component:ui",
  "content": "import type { VariantProps } from 'tailwind-variants';\\nimport { forwardRef } from 'react';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst alertStyles = tv({\\n  slots: {\\n    base: 'relative w-full rounded-xl border bg-grey-base p-4 text-sm shadow-md',\\n    title: clsx(\\n      'mb-1 flex items-center gap-x-2 font-medium leading-none tracking-tight text-current',\\n      '[&_svg]:size-4',\\n    ),\\n    description: 'text-grey-text',\\n  },\\n  variants: {\\n    intent: {\\n      default: {\\n        base: 'border-grey-line text-grey-text-contrast',\\n      },\\n      info: {\\n        base: 'border-info-line text-info-solid',\\n      },\\n      success: {\\n        base: 'border-success-line text-success-solid',\\n      },\\n      warning: {\\n        base: 'border-warning-line text-warning-solid',\\n      },\\n      error: {\\n        base: 'border-error-line text-error-solid',\\n      },\\n    },\\n  },\\n  defaultVariants: {\\n    intent: 'default',\\n  },\\n});\\n\\nconst { base, title, description } = alertStyles();\\n\\ntype DivProps = React.HTMLAttributes<HTMLDivElement>;\\ntype AlertVariants = VariantProps<typeof alertStyles>;\\ntype AlertProps = DivProps & AlertVariants;\\n\\n/**\\n * Alert component that displays a message with an optional title and description.\\n *\\n * @param {AlertProps} props - The props for the Alert component.\\n * @param {'default' | 'info' | 'success' | 'warning' | 'error'} [intent='default'] - The visual style of the alert (e.g., 'info', 'success', 'warning', 'error').\\n *\\n * @example\\n * ```tsx\\n * // Basic usage\\n * <Alert>\\n *   <AlertTitle>Heads up!</AlertTitle>\\n *   <AlertDescription>\\n *     You can add components and dependencies to your app using the cli.\\n *   </AlertDescription>\\n * </Alert>\\n * ```\\n *\\n * @example\\n * ```tsx\\n * // Alert with a specific intent\\n * <Alert intent='success'>\\n *   <AlertTitle>Success!</AlertTitle>\\n *   <AlertDescription>\\n *     Your changes have been saved successfully.\\n *   </AlertDescription>\\n * </Alert>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-alert Alert Docs} for further information.\\n */\\nexport const Alert = forwardRef<HTMLDivElement, AlertProps>(\\n  ({ className, intent, ...props }, ref) => (\\n    <div\\n      ref={ref}\\n      className={base({ className, intent })}\\n      role='alert'\\n      {...props}\\n    />\\n  ),\\n);\\n\\nAlert.displayName = 'Alert';\\n\\ntype AlertTitleRef = HTMLParagraphElement;\\ntype AlertTitleProps = React.HTMLAttributes<HTMLHeadingElement>;\\n\\n/**\\n * AlertTitle component for the Alert.\\n *\\n * @param {AlertTitleProps} props - Additional props to pass to the title element.\\n *\\n * @example\\n * ```tsx\\n * <AlertTitle>Heads up!</AlertTitle>\\n * ```\\n */\\nexport const AlertTitle = forwardRef<AlertTitleRef, AlertTitleProps>(\\n  ({ className, ...props }, ref) => (\\n    <h5 ref={ref} className={title({ className })} {...props} />\\n  ),\\n);\\n\\nAlertTitle.displayName = 'AlertTitle';\\n\\ntype AlertDescriptionRef = HTMLParagraphElement;\\ntype AlertDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>;\\n\\n/**\\n * AlertDescription component for the Alert.\\n *\\n * @param {AlertDescriptionProps} props - Additional props to pass to the description element.\\n *\\n * @example\\n * ```tsx\\n * <AlertDescription>\\n *   You can add components and dependencies to your app using the cli.\\n * </AlertDescription>\\n * ```\\n */\\nexport const AlertDescription = forwardRef<\\n  AlertDescriptionRef,\\n  AlertDescriptionProps\\n>(({ className, ...props }, ref) => (\\n  <p ref={ref} className={description({ className })} {...props} />\\n));\\n\\nAlertDescription.displayName = 'AlertDescription';\\n"
}
