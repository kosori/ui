{
  "name": "pagination",
  "type": "component:ui",
  "content": "import { forwardRef } from 'react';\\nimport {\\n  ChevronLeftIcon,\\n  ChevronRightIcon,\\n  DotsHorizontalIcon,\\n} from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nimport type { ButtonProps } from '@kosori/ui/button';\\nimport { buttonStyles } from '@kosori/ui/button';\\n\\nconst paginationStyles = tv({\\n  slots: {\\n    base: 'mx-auto flex w-full justify-center',\\n    content: 'flex flex-row items-center gap-1',\\n    item: '',\\n    previous: 'gap-1 pl-2.5',\\n    next: 'gap-1 pr-2.5',\\n    ellipsis: 'flex h-9 w-9 items-center justify-center',\\n    ellipsisIcon: 'size-4',\\n  },\\n});\\n\\nconst { base, content, item, previous, next, ellipsis, ellipsisIcon } =\\n  paginationStyles();\\n\\n/**\\n * Pagination component that serves as a container for pagination controls.\\n *\\n * @param {React.ComponentProps<'nav'>} props - The props for the Pagination component.\\n *\\n * @example\\n * ```tsx\\n * <Pagination>\\n *   <PaginationContent>\\n *     <PaginationItem>\\n *       <PaginationPrevious href='#' />\\n *     </PaginationItem>\\n *     <PaginationItem>\\n *       <PaginationLink href='#'>1</PaginationLink>\\n *     </PaginationItem>\\n *     <PaginationItem>\\n *       <PaginationEllipsis />\\n *     </PaginationItem>\\n *     <PaginationItem>\\n *       <PaginationNext href='#' />\\n *     </PaginationItem>\\n *   </PaginationContent>\\n * </Pagination>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-pagination Pagination Docs} for further information.\\n */\\nexport const Pagination = ({\\n  className,\\n  ...props\\n}: React.ComponentProps<'nav'>) => (\\n  <nav\\n    aria-label='pagination'\\n    className={base({ className })}\\n    role='navigation'\\n    {...props}\\n  />\\n);\\n\\nPagination.displayName = 'Pagination';\\n\\ntype PaginationContentRef = HTMLUListElement;\\ntype PaginationContentProps = React.ComponentProps<'ul'>;\\n\\n/**\\n * PaginationContent component that wraps the pagination items.\\n *\\n * @param {React.ComponentProps<'ul'>} props - The props for the PaginationContent component.\\n *\\n * @example\\n * ```tsx\\n * <PaginationContent>\\n *   {Pagination items here}\\n * </PaginationContent>\\n * ```\\n */\\nexport const PaginationContent = forwardRef<\\n  PaginationContentRef,\\n  PaginationContentProps\\n>(({ className, ...props }, ref) => (\\n  <ul ref={ref} className={content({ className })} {...props} />\\n));\\n\\nPaginationContent.displayName = 'PaginationContent';\\n\\ntype PaginationItemRef = HTMLLIElement;\\ntype PaginationItemProps = React.ComponentProps<'li'>;\\n\\n/**\\n * PaginationItem component that represents an individual item in the pagination.\\n *\\n * @param {React.ComponentProps<'li'>} props - The props for the PaginationItem component.\\n *\\n * @example\\n * ```tsx\\n * <PaginationItem>\\n *   <PaginationLink href='#'>1</PaginationLink>\\n * </PaginationItem>\\n * ```\\n */\\nexport const PaginationItem = forwardRef<\\n  PaginationItemRef,\\n  PaginationItemProps\\n>(({ className, ...props }, ref) => (\\n  <li ref={ref} className={item({ className })} {...props} />\\n));\\n\\nPaginationItem.displayName = 'PaginationItem';\\n\\ntype PaginationLinkProps = {\\n  isActive?: boolean;\\n} & Pick<ButtonProps, 'size'> &\\n  Pick<ButtonProps, 'icon'> &\\n  React.ComponentProps<'a'>;\\n\\n/**\\n * PaginationLink component that represents a link to a specific page in the pagination.\\n *\\n * @param {PaginationLinkProps} props - The props for the PaginationLink component.\\n * @param {boolean} [isActive] - Indicates if the link is the active page.\\n * @param {string} [size='medium'] - The size of the button (e.g. 'small', 'medium', 'large').\\n * @param {boolean} [icon=true] - Indicates if an icon should be displayed.\\n *\\n * @example\\n * ```tsx\\n * <PaginationLink href='#'>1</PaginationLink>\\n * ```\\n */\\nexport const PaginationLink = ({\\n  className,\\n  isActive,\\n  size = 'medium',\\n  icon = true,\\n  ...props\\n}: PaginationLinkProps) => (\\n  <a\\n    aria-current={isActive ? 'page' : undefined}\\n    className={clsx(\\n      buttonStyles({\\n        className,\\n        variant: isActive ? 'outline' : 'ghost',\\n        size,\\n        icon,\\n      }),\\n    )}\\n    {...props}\\n  />\\n);\\n\\nPaginationLink.displayName = 'PaginationLink';\\n\\ntype PaginationPreviousProps = React.ComponentProps<typeof PaginationLink>;\\n\\n/**\\n * PaginationPrevious component that represents the link to the previous page.\\n *\\n * @param {PaginationPreviousProps} props - The props for the PaginationPrevious component.\\n *\\n * @example\\n * ```tsx\\n * <PaginationPrevious href='#' />\\n * ```\\n */\\nexport const PaginationPrevious = ({\\n  className,\\n  ...props\\n}: PaginationPreviousProps) => (\\n  <PaginationLink\\n    aria-label='Go to previous page'\\n    className={previous({ className })}\\n    icon={false}\\n    size='medium'\\n    {...props}\\n  >\\n    <ChevronLeftIcon />\\n    <span>Previous</span>\\n  </PaginationLink>\\n);\\n\\nPaginationPrevious.displayName = 'PaginationPrevious';\\n\\ntype PaginationNextProps = React.ComponentProps<typeof PaginationLink>;\\n\\n/**\\n * PaginationNext component that represents the link to the next page.\\n *\\n * @param {PaginationNextProps} props - The props for the PaginationNext component.\\n *\\n * @example\\n * ```tsx\\n * <PaginationNext href='#' />\\n * ```\\n */\\nexport const PaginationNext = ({\\n  className,\\n  ...props\\n}: PaginationNextProps) => (\\n  <PaginationLink\\n    aria-label='Go to next page'\\n    className={next({ className })}\\n    icon={false}\\n    size='medium'\\n    {...props}\\n  >\\n    <span>Next</span>\\n    <ChevronRightIcon />\\n  </PaginationLink>\\n);\\n\\nPaginationNext.displayName = 'PaginationNext';\\n\\ntype PaginationEllipsisProps = React.ComponentProps<'span'>;\\n\\n/**\\n * PaginationEllipsis component that indicates there are more pages in the pagination.\\n *\\n * @param {PaginationEllipsisProps} props - The props for the PaginationEllipsis component.\\n *\\n * @example\\n * ```tsx\\n * <PaginationEllipsis />\\n * ```\\n */\\nexport const PaginationEllipsis = ({\\n  className,\\n  ...props\\n}: PaginationEllipsisProps) => (\\n  <span aria-hidden className={ellipsis({ className })} {...props}>\\n    <DotsHorizontalIcon className={ellipsisIcon()} />\\n    <span className='sr-only'>More pages</span>\\n  </span>\\n);\\n\\nPaginationEllipsis.displayName = 'PaginationEllipsis';\\n"
}
