{
  "name": "navigation-menu",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-navigation-menu"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\\nimport {\\n  Content,\\n  Indicator,\\n  Item,\\n  Link,\\n  List,\\n  Root,\\n  Trigger,\\n  Viewport,\\n} from '@radix-ui/react-navigation-menu';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst navigationMenuStyles = tv({\\n  slots: {\\n    base: 'relative z-10 flex flex-1 items-center justify-center',\\n    list: 'group flex flex-1 list-none items-center justify-center space-x-1',\\n    trigger: clsx(\\n      'group inline-flex h-10 w-max items-center justify-center rounded-lg bg-grey-base px-4 py-2 text-sm font-medium transition-colors duration-200',\\n      'hover:bg-primary-bg-hover',\\n      'active:bg-primary-bg-bctive',\\n      'focus:bg-primary-bg-hover focus:outline-none',\\n      'data-[state=open]:bg-primary-bg-active',\\n      'disabled:cursor-not-allowed disabled:text-grey-solid',\\n      'disabled:hover:bg-grey-base',\\n    ),\\n    triggerIcon: clsx(\\n      'relative top-px ml-1 h-3 w-3 transition-transform duration-200',\\n      'group-data-[state=open]:rotate-180',\\n    ),\\n    content: clsx(\\n      'left-0 top-0 z-50 w-full',\\n      'md:absolute md:w-auto',\\n      'data-[motion^=from-]:animate-in data-[motion^=from-]:fade-in',\\n      'data-[motion^=to-]:animate-out data-[motion^=to-]:fade-out',\\n      'data-[motion=from-end]:slide-in-from-right-52',\\n      'data-[motion=from-start]:slide-in-from-left-52',\\n      'data-[motion=to-end]:slide-out-to-right-52',\\n      'data-[motion=to-start]:slide-out-to-left-52',\\n    ),\\n    indicator: clsx(\\n      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',\\n      'data-[state=visible]:animate-in data-[state=visible]:fade-in',\\n      'data-[state=hidden]:animate-out data-[state=hidden]:fade-out',\\n    ),\\n    indicatorIcon:\\n      'relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-grey-line shadow-md',\\n    viewportWrapper: 'absolute left-0 top-full flex justify-center',\\n    viewport: clsx(\\n      'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-2xl border border-grey-line bg-grey-base shadow-md',\\n      'md:w-[var(--radix-navigation-menu-viewport-width)]',\\n      'data-[state=open]:animate-in data-[state=open]:zoom-in-90',\\n      'data-[state=closed]:animate-out data-[state=closed]:zoom-out-95',\\n    ),\\n  },\\n});\\n\\nconst {\\n  base,\\n  list,\\n  trigger,\\n  triggerIcon,\\n  content,\\n  indicator,\\n  indicatorIcon,\\n  viewportWrapper,\\n  viewport,\\n} = navigationMenuStyles();\\n\\nexport { trigger as navigationMenuTriggerStyle };\\n\\ntype NavigationMenuRef = React.ElementRef<typeof Root>;\\ntype NavigationMenuProps = React.ComponentPropsWithoutRef<typeof Root>;\\n\\n/**\\n * NavigationMenu component that serves as a container for navigation items.\\n *\\n * @param {NavigationMenuProps} props - The props for the NavigationMenu component.\\n *\\n * @example\\n * <NavigationMenu>\\n *   <NavigationMenuList>\\n *     <NavigationMenuItem>\\n *       <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\\n *       <NavigationMenuContent>\\n *         <NavigationMenuLink>Link</NavigationMenuLink>\\n *       </NavigationMenuContent>\\n *     </NavigationMenuItem>\\n *   </NavigationMenuList>\\n * </NavigationMenu>\\n *\\n * @see {@link https://dub.sh/ui-navigation-menu NavigationMenu Docs} for further information.\\n */\\nexport const NavigationMenu = forwardRef<\\n  NavigationMenuRef,\\n  NavigationMenuProps\\n>(({ className, children, ...props }, ref) => (\\n  <Root ref={ref} className={base({ className })} {...props}>\\n    {children}\\n    <NavigationMenuViewport />\\n  </Root>\\n));\\n\\nNavigationMenu.displayName = Root.displayName;\\n\\ntype NavigationMenuListRef = React.ElementRef<typeof List>;\\ntype NavigationMenuListProps = React.ComponentPropsWithoutRef<typeof List>;\\n\\n/**\\n * NavigationMenuList component that displays a list of navigation items.\\n *\\n * @param {NavigationMenuListProps} props - The props for the NavigationMenuList component.\\n *\\n * @example\\n * <NavigationMenuList>\\n *   {Navigation items here}\\n * </NavigationMenuList>\\n */\\nexport const NavigationMenuList = forwardRef<\\n  NavigationMenuListRef,\\n  NavigationMenuListProps\\n>(({ className, ...props }, ref) => (\\n  <List ref={ref} className={list({ className })} {...props} />\\n));\\n\\nNavigationMenuList.displayName = List.displayName;\\n\\n/**\\n * NavigationMenuItem component that represents an individual item in the navigation menu.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Item>} props - The props for the NavigationMenuItem component.\\n *\\n * @example\\n * <NavigationMenuItem>\\n *   <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\\n * </NavigationMenuItem>\\n */\\nexport const NavigationMenuItem = Item;\\n\\ntype NavigationMenuTriggerRef = React.ElementRef<typeof Trigger>;\\ntype NavigationMenuTriggerProps = React.ComponentPropsWithoutRef<\\n  typeof Trigger\\n>;\\n\\n/**\\n * NavigationMenuTrigger component that triggers the display of the navigation content.\\n *\\n * @param {NavigationMenuTriggerProps} props - The props for the NavigationMenuTrigger component.\\n *\\n * @example\\n * <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\\n */\\nexport const NavigationMenuTrigger = forwardRef<\\n  NavigationMenuTriggerRef,\\n  NavigationMenuTriggerProps\\n>(({ className, children, ...props }, ref) => (\\n  <Trigger ref={ref} className={trigger({ className })} {...props}>\\n    {children}\\n    <ChevronDownIcon className={triggerIcon()} />\\n  </Trigger>\\n));\\n\\nNavigationMenuTrigger.displayName = Trigger.displayName;\\n\\ntype NavigationMenuContentRef = React.ElementRef<typeof Content>;\\ntype NavigationMenuContentProps = React.ComponentPropsWithoutRef<\\n  typeof Content\\n>;\\n\\n/**\\n * NavigationMenuContent component that displays the content of a navigation item.\\n *\\n * @param {NavigationMenuContentProps} props - The props for the NavigationMenuContent component.\\n *\\n * @example\\n * <NavigationMenuContent>\\n *   <NavigationMenuLink>Link</NavigationMenuLink>\\n * </NavigationMenuContent>\\n */\\nexport const NavigationMenuContent = forwardRef<\\n  NavigationMenuContentRef,\\n  NavigationMenuContentProps\\n>(({ className, ...props }, ref) => (\\n  <Content ref={ref} className={content({ className })} {...props} />\\n));\\n\\nNavigationMenuContent.displayName = Content.displayName;\\n\\n/**\\n * NavigationMenuLink component that represents a link in the navigation menu.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Link>} props - The props for the NavigationMenuLink component.\\n *\\n * @example\\n * <NavigationMenuLink>Link</NavigationMenuLink>\\n */\\nexport const NavigationMenuLink = Link;\\n\\ntype NavigationMenuIndicatorRef = React.ElementRef<typeof Indicator>;\\ntype NavigationMenuIndicatorProps = React.ComponentPropsWithRef<\\n  typeof Indicator\\n>;\\n\\n/**\\n * NavigationMenuIndicator component that indicates the active navigation item.\\n *\\n * @param {NavigationMenuIndicatorProps} props - The props for the NavigationMenuIndicator component.\\n *\\n * @example\\n * <NavigationMenuIndicator />\\n */\\nexport const NavigationMenuIndicator = forwardRef<\\n  NavigationMenuIndicatorRef,\\n  NavigationMenuIndicatorProps\\n>(({ className, ...props }, ref) => (\\n  <Indicator ref={ref} className={indicator({ className })} {...props}>\\n    <div className={indicatorIcon()} />\\n  </Indicator>\\n));\\n\\nNavigationMenuIndicator.displayName = Indicator.displayName;\\n\\ntype NavigationMenuViewportRef = React.ElementRef<typeof Viewport>;\\ntype NavigationMenuViewportProps = React.ComponentPropsWithoutRef<\\n  typeof Viewport\\n>;\\n\\n/**\\n * NavigationMenuViewport component that defines the viewport for the navigation menu.\\n *\\n * @param {NavigationMenuViewportProps} props - The props for the NavigationMenuViewport component.\\n *\\n * @example\\n * <NavigationMenuViewport />\\n */\\nexport const NavigationMenuViewport = forwardRef<\\n  NavigationMenuViewportRef,\\n  NavigationMenuViewportProps\\n>(({ className, ...props }, ref) => (\\n  <div className={viewportWrapper()}>\\n    <Viewport ref={ref} className={viewport({ className })} {...props} />\\n  </div>\\n));\\n\\nNavigationMenuViewport.displayName = Viewport.displayName;\\n"
}
