{
  "name": "dropdown-menu",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-dropdown-menu"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport {\\n  CheckboxItem,\\n  Content,\\n  Group,\\n  Item,\\n  ItemIndicator,\\n  Label,\\n  Portal,\\n  RadioGroup,\\n  RadioItem,\\n  Root,\\n  Separator,\\n  Sub,\\n  SubContent,\\n  SubTrigger,\\n  Trigger,\\n} from '@radix-ui/react-dropdown-menu';\\nimport {\\n  CheckIcon,\\n  ChevronRightIcon,\\n  DotFilledIcon,\\n} from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx';\\nimport { tv } from 'tailwind-variants';\\n\\nconst dropdownMenuStyles = tv({\\n  slots: {\\n    content: clsx(\\n      'z-50 min-w-32 overflow-hidden rounded-lg border bg-grey-base p-1 shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n    ),\\n    item: clsx(\\n      'group relative flex h-8 cursor-pointer select-none items-center gap-2 rounded-md px-2 text-sm outline-none transition-colors',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n      '[&>svg]:size-4 [&>svg]:shrink-0',\\n    ),\\n    label:\\n      'flex h-8 select-none items-center px-2 text-xs font-medium text-grey-text',\\n    checkboxItem: clsx(\\n      'group relative flex h-8 select-none items-center rounded-md pl-8 pr-2 text-sm outline-none transition-colors',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    checkboxItemIndicator:\\n      'absolute left-2 flex size-3.5 items-center justify-center',\\n    checkboxItemIcon: 'size-4',\\n    radioItem: clsx(\\n      'group relative flex h-8 select-none items-center rounded-md pl-8 pr-2 text-sm outline-none transition-colors',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    radioItemIndicator:\\n      'absolute left-2 flex size-3.5 items-center justify-center',\\n    radioItemIcon: 'size-4',\\n    separator: '-mx-1 my-1 h-px bg-grey-line',\\n    subTrigger: clsx(\\n      'group flex h-8 cursor-pointer select-none items-center rounded-md px-2 text-sm outline-none transition-colors',\\n      'focus:bg-primary-bg-hover',\\n      'data-[state=open]:bg-primary-bg-hover',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    subTriggerIcon: clsx(\\n      'ml-auto size-4',\\n      'group-data-[disabled]:text-grey-solid',\\n    ),\\n    subContent: clsx(\\n      'z-50 min-w-32 overflow-hidden rounded-lg border border-grey-line bg-grey-base p-1 shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n    ),\\n    shortcut: clsx(\\n      'ml-auto text-xs tracking-widest text-grey-text',\\n      'group-data-[disabled]:text-grey-solid',\\n    ),\\n  },\\n  variants: {\\n    inset: {\\n      true: {\\n        item: 'pl-8',\\n        label: 'pl-8',\\n        subTrigger: 'pl-8',\\n      },\\n    },\\n  },\\n});\\n\\nconst {\\n  content,\\n  item,\\n  label,\\n  checkboxItem,\\n  checkboxItemIndicator,\\n  checkboxItemIcon,\\n  radioItem,\\n  radioItemIndicator,\\n  radioItemIcon,\\n  separator,\\n  subTrigger,\\n  subTriggerIcon,\\n  subContent,\\n  shortcut,\\n} = dropdownMenuStyles();\\n\\n/**\\n * DropdownMenu component that provides a dropdown menu for user interactions.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - The props for the DropdownMenu component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenu>\\n *   <DropdownMenuTrigger>Open</DropdownMenuTrigger>\\n *   <DropdownMenuContent>\\n *     <DropdownMenuLabel>My Account</DropdownMenuLabel>\\n *     <DropdownMenuSeparator />\\n *     <DropdownMenuItem>Profile</DropdownMenuItem>\\n *     <DropdownMenuItem>Billing</DropdownMenuItem>\\n *     <DropdownMenuItem>Team</DropdownMenuItem>\\n *     <DropdownMenuItem>Subscription</DropdownMenuItem>\\n *   </DropdownMenuContent>\\n * </DropdownMenu>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-dropdown-menu Dropdown Menu Docs} for further information.\\n */\\nexport const DropdownMenu = Root;\\n\\nexport const DropdownMenuTrigger = Trigger;\\n\\nexport const DropdownMenuPortal = Portal;\\n\\ntype DropdownMenuContentRef = React.ElementRef<typeof Content>;\\ntype DropdownMenuContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * DropdownMenuContent component that wraps the content of the DropdownMenu.\\n *\\n * @param {DropdownMenuContentProps} props - The props for the DropdownMenuContent component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuContent>\\n *   <DropdownMenuItem>Profile</DropdownMenuItem>\\n * </DropdownMenuContent>\\n * ```\\n */\\nexport const DropdownMenuContent = forwardRef<\\n  DropdownMenuContentRef,\\n  DropdownMenuContentProps\\n>(({ className, sideOffset = 4, ...props }, ref) => (\\n  <Content\\n    ref={ref}\\n    className={content({ className })}\\n    sideOffset={sideOffset}\\n    {...props}\\n  />\\n));\\n\\nDropdownMenuContent.displayName = Content.displayName;\\n\\ntype DropdownMenuItemRef = React.ElementRef<typeof Item>;\\ntype DropdownMenuItemProps = React.ComponentPropsWithoutRef<typeof Item> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * DropdownMenuItem component that represents a single item in the DropdownMenu.\\n *\\n * @param {DropdownMenuItemProps} props - The props for the DropdownMenuItem component.\\n * @param {boolean} [inset] - Whether the item is inset.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuItem>Profile</DropdownMenuItem>\\n * ```\\n */\\nexport const DropdownMenuItem = forwardRef<\\n  DropdownMenuItemRef,\\n  DropdownMenuItemProps\\n>(({ className, inset, ...props }, ref) => (\\n  <Item ref={ref} className={item({ className, inset })} {...props} />\\n));\\n\\nDropdownMenuItem.displayName = Item.displayName;\\n\\nexport const DropdownMenuGroup = Group;\\n\\ntype DropdownMenuLabelRef = React.ElementRef<typeof Label>;\\ntype DropdownMenuLabelProps = React.ComponentPropsWithoutRef<typeof Label> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * DropdownMenuLabel component that displays a label for a group of items in the DropdownMenu.\\n *\\n * @param {DropdownMenuLabelProps} props - The props for the DropdownMenuLabel component.\\n * @param {boolean} [inset] - Whether the label is inset.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuLabel>Settings</DropdownMenuLabel>\\n * ```\\n */\\nexport const DropdownMenuLabel = forwardRef<\\n  DropdownMenuLabelRef,\\n  DropdownMenuLabelProps\\n>(({ className, inset, ...props }, ref) => (\\n  <Label ref={ref} className={label({ className, inset })} {...props} />\\n));\\n\\nDropdownMenuLabel.displayName = Label.displayName;\\n\\ntype DropdownMenuCheckboxItemRef = React.ElementRef<typeof CheckboxItem>;\\ntype DropdownMenuCheckboxItemProps = React.ComponentPropsWithoutRef<\\n  typeof CheckboxItem\\n>;\\n\\n/**\\n * DropdownMenuCheckboxItem component that represents a checkbox item in the DropdownMenu.\\n *\\n * @param {DropdownMenuCheckboxItemProps} props - The props for the DropdownMenuCheckboxItem component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuCheckboxItem checked={true}>Enable Notifications</DropdownMenuCheckboxItem>\\n * ```\\n */\\nexport const DropdownMenuCheckboxItem = forwardRef<\\n  DropdownMenuCheckboxItemRef,\\n  DropdownMenuCheckboxItemProps\\n>(({ className, children, checked, ...props }, ref) => (\\n  <CheckboxItem\\n    ref={ref}\\n    checked={checked}\\n    className={checkboxItem({ className })}\\n    {...props}\\n  >\\n    <span className={checkboxItemIndicator()}>\\n      <ItemIndicator>\\n        <CheckIcon className={checkboxItemIcon()} />\\n      </ItemIndicator>\\n    </span>\\n    {children}\\n  </CheckboxItem>\\n));\\n\\nDropdownMenuCheckboxItem.displayName = CheckboxItem.displayName;\\n\\nexport const DropdownMenuRadioGroup = RadioGroup;\\n\\ntype DropdownMenuRadioItemRef = React.ElementRef<typeof RadioItem>;\\ntype DropdownMenuRadioItemProps = React.ComponentPropsWithoutRef<\\n  typeof RadioItem\\n>;\\n\\n/**\\n * DropdownMenuRadioItem component that represents a radio item in the DropdownMenu.\\n *\\n * @param {DropdownMenuRadioItemProps} props - The props for the DropdownMenuRadioItem component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuRadioItem>Option 1</DropdownMenuRadioItem>\\n * ```\\n */\\nexport const DropdownMenuRadioItem = forwardRef<\\n  DropdownMenuRadioItemRef,\\n  DropdownMenuRadioItemProps\\n>(({ className, children, ...props }, ref) => (\\n  <RadioItem ref={ref} className={radioItem({ className })} {...props}>\\n    <span className={radioItemIndicator()}>\\n      <ItemIndicator>\\n        <DotFilledIcon className={radioItemIcon()} />\\n      </ItemIndicator>\\n    </span>\\n    {children}\\n  </RadioItem>\\n));\\n\\nDropdownMenuRadioItem.displayName = RadioItem.displayName;\\n\\ntype DropdownMenuSeparatorRef = React.ElementRef<typeof Separator>;\\ntype DropdownMenuSeparatorProps = React.ComponentPropsWithoutRef<\\n  typeof Separator\\n>;\\n\\n/**\\n * DropdownMenuSeparator component that visually separates items in the DropdownMenu.\\n *\\n * @param {DropdownMenuSeparatorProps} props - The props for the DropdownMenuSeparator component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuSeparator />\\n * ```\\n */\\nexport const DropdownMenuSeparator = forwardRef<\\n  DropdownMenuSeparatorRef,\\n  DropdownMenuSeparatorProps\\n>(({ className, ...props }, ref) => (\\n  <Separator ref={ref} className={separator({ className })} {...props} />\\n));\\n\\nDropdownMenuSeparator.displayName = Separator.displayName;\\n\\nexport const DropdownMenuSub = Sub;\\n\\ntype DropdownMenuSubTriggerRef = React.ElementRef<typeof SubTrigger>;\\ntype DropdownMenuSubTriggerProps = React.ComponentPropsWithoutRef<\\n  typeof SubTrigger\\n> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * DropdownMenuSubTrigger component that serves as the trigger for a sub-menu in the DropdownMenu.\\n *\\n * @param {DropdownMenuSubTriggerProps} props - The props for the DropdownMenuSubTrigger component.\\n * @param {boolean} [inset] - Whether the trigger is inset.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuSubTrigger>More Options</DropdownMenuSubTrigger>\\n * ```\\n */\\nexport const DropdownMenuSubTrigger = forwardRef<\\n  DropdownMenuSubTriggerRef,\\n  DropdownMenuSubTriggerProps\\n>(({ className, inset, children, ...props }, ref) => (\\n  <SubTrigger ref={ref} className={subTrigger({ className, inset })} {...props}>\\n    {children}\\n    <ChevronRightIcon className={subTriggerIcon()} />\\n  </SubTrigger>\\n));\\n\\nDropdownMenuSubTrigger.displayName = SubTrigger.displayName;\\n\\ntype DropdownMenuSubContentRef = React.ElementRef<typeof SubContent>;\\ntype DropdownMenuSubContentProps = React.ComponentPropsWithoutRef<\\n  typeof SubContent\\n>;\\n\\n/**\\n * DropdownMenuSubContent component that wraps the content of a sub-menu in the DropdownMenu.\\n *\\n * @param {DropdownMenuSubContentProps} props - The props for the DropdownMenuSubContent component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuSubContent>...</DropdownMenuSubContent>\\n * ```\\n */\\nexport const DropdownMenuSubContent = forwardRef<\\n  DropdownMenuSubContentRef,\\n  DropdownMenuSubContentProps\\n>(({ className, ...props }, ref) => (\\n  <SubContent ref={ref} className={subContent({ className })} {...props} />\\n));\\n\\nDropdownMenuSubContent.displayName = SubContent.displayName;\\n\\ntype DropdownMenuShortcutProps = React.HTMLAttributes<HTMLSpanElement>;\\n\\n/**\\n * DropdownMenuShortcut component that displays a keyboard shortcut for a command item.\\n *\\n * @param {DropdownMenuShortcutProps} props - The props for the DropdownMenuShortcut component.\\n *\\n * @example\\n * ```tsx\\n * <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\\n * ```\\n */\\nexport const DropdownMenuShortcut = ({\\n  className,\\n  ...props\\n}: DropdownMenuShortcutProps) => (\\n  <span className={shortcut({ className })} {...props} />\\n);\\n\\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\\n"
}
