{
  "name": "menubar",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-menubar"],
  "content": "import { forwardRef } from 'react';\\nimport {\\n  CheckIcon,\\n  ChevronRightIcon,\\n  DotFilledIcon,\\n} from '@radix-ui/react-icons';\\nimport {\\n  CheckboxItem,\\n  Content,\\n  Group,\\n  Item,\\n  ItemIndicator,\\n  Label,\\n  Menu,\\n  Portal,\\n  RadioGroup,\\n  RadioItem,\\n  Root,\\n  Separator,\\n  Sub,\\n  SubContent,\\n  SubTrigger,\\n  Trigger,\\n} from '@radix-ui/react-menubar';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst menubarStyles = tv({\\n  slots: {\\n    base: 'flex h-9 items-center space-x-1 rounded-lg border border-grey-line bg-grey-base p-1 shadow-sm',\\n    trigger: clsx(\\n      'flex h-full select-none items-center rounded-md px-3 py-1 text-sm font-medium outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'data-[state=open]:bg-primary-bg-hover',\\n    ),\\n    content: clsx(\\n      'z-50 min-w-48 overflow-hidden rounded-lg border border-grey-line bg-grey-base p-1 shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n    ),\\n    item: clsx(\\n      'group relative flex h-8 cursor-pointer select-none items-center rounded-md px-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    label:\\n      'flex h-8 select-none items-center px-2 text-xs font-medium text-grey-text',\\n    checkboxItem: clsx(\\n      'group relative flex h-8 cursor-pointer select-none items-center rounded-md pl-8 pr-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    checkboxItemIndicator: 'absolute left-2 flex items-center justify-center',\\n    checkboxItemIcon: 'size-4',\\n    radioItem: clsx(\\n      'relative flex h-8 cursor-pointer select-none items-center rounded-md pl-8 pr-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    radioItemIndicator: 'absolute left-2 flex items-center justify-center',\\n    radioItemIcon: 'size-4',\\n    separator: '-mx-1 my-1 h-px bg-grey-line',\\n    subTrigger: clsx(\\n      'group flex h-8 cursor-pointer select-none items-center rounded-md px-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'data-[state=open]:bg-primary-bg-hover',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    subTriggerIcon: clsx(\\n      'ml-auto size-4',\\n      'group-data-[disabled]:text-grey-solid',\\n    ),\\n    subContent: clsx(\\n      'z-50 min-w-32 overflow-hidden rounded-lg border border-grey-line bg-grey-base p-1 shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n    ),\\n    shortcut: clsx(\\n      'ml-auto text-xs tracking-widest text-grey-text',\\n      'group-data-[disabled]:text-grey-solid',\\n    ),\\n  },\\n  variants: {\\n    inset: {\\n      true: {\\n        item: 'pl-8',\\n        label: 'pl-8',\\n        subTrigger: 'pl-8',\\n      },\\n    },\\n  },\\n});\\n\\nconst {\\n  base,\\n  trigger,\\n  content,\\n  item,\\n  label,\\n  checkboxItem,\\n  checkboxItemIndicator,\\n  checkboxItemIcon,\\n  radioItem,\\n  radioItemIndicator,\\n  radioItemIcon,\\n  separator,\\n  subTrigger,\\n  subTriggerIcon,\\n  subContent,\\n  shortcut,\\n} = menubarStyles();\\n\\ntype MenubarRef = React.ElementRef<typeof Root>;\\ntype MenubarProps = React.ComponentPropsWithoutRef<typeof Root>;\\n\\n/**\\n * Menubar component that serves as a container for the menu items.\\n *\\n * @param {MenubarProps} props - The props for the Menubar component.\\n *\\n * @example\\n * ```tsx\\n * <Menubar>\\n *   <MenubarMenu>\\n *     <MenubarTrigger>File</MenubarTrigger>\\n *     <MenubarContent>\\n *       <MenubarItem>\\n *         New Tab <MenubarShortcut>âŒ˜T</MenubarShortcut>\\n *       </MenubarItem>\\n *       <MenubarItem>New Window</MenubarItem>\\n *       <MenubarSeparator />\\n *       <MenubarItem>Share</MenubarItem>\\n *       <MenubarSeparator />\\n *       <MenubarItem>Print</MenubarItem>\\n *     </MenubarContent>\\n *   </MenubarMenu>\\n * </Menubar>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-menubar Menubar Docs} for further information.\\n */\\nexport const Menubar = forwardRef<MenubarRef, MenubarProps>(\\n  ({ className, ...props }, ref) => (\\n    <Root ref={ref} className={base({ className })} {...props} />\\n  ),\\n);\\n\\nMenubar.displayName = Root.displayName;\\n\\n/**\\n * MenubarMenu component that represents a menu within the menubar.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Menu>} props - The props for the MenubarMenu component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarMenu>\\n *   <MenubarTrigger>File</MenubarTrigger>\\n *   <MenubarContent>\\n *     {Menu items here}\\n *   </MenubarContent>\\n * </MenubarMenu>\\n * ```\\n */\\nexport const MenubarMenu = Menu;\\n\\ntype MenubarTriggerRef = React.ElementRef<typeof Trigger>;\\ntype MenubarTriggerProps = React.ComponentPropsWithoutRef<typeof Trigger>;\\n\\n/**\\n * MenubarTrigger component that triggers the display of the menu content.\\n *\\n * @param {MenubarTriggerProps} props - The props for the MenubarTrigger component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarTrigger>File</MenubarTrigger>\\n * ```\\n */\\nexport const MenubarTrigger = forwardRef<\\n  MenubarTriggerRef,\\n  MenubarTriggerProps\\n>(({ className, ...props }, ref) => (\\n  <Trigger ref={ref} className={trigger({ className })} {...props} />\\n));\\n\\nMenubarTrigger.displayName = Trigger.displayName;\\n\\n/**\\n * MenubarPortal component that renders the menu content in a portal.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Portal>} props - The props for the MenubarPortal component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarPortal>\\n *   <MenubarContent>\\n *     {Menu items here}\\n *   <MenubarContent />\\n * </MenubarPortal>\\n * ```\\n */\\nexport const MenubarPortal = Portal;\\n\\ntype MenubarContentRef = React.ElementRef<typeof Content>;\\ntype MenubarContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * MenubarContent component that displays the content of the menu.\\n *\\n * @param {MenubarContentProps} props - The props for the MenubarContent component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarContent>\\n *   {Menu items here}\\n * </MenubarContent>\\n * ```\\n */\\nexport const MenubarContent = forwardRef<\\n  MenubarContentRef,\\n  MenubarContentProps\\n>(\\n  (\\n    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },\\n    ref,\\n  ) => (\\n    <Portal>\\n      <Content\\n        ref={ref}\\n        align={align}\\n        alignOffset={alignOffset}\\n        className={content({ className })}\\n        sideOffset={sideOffset}\\n        {...props}\\n      />\\n    </Portal>\\n  ),\\n);\\n\\nMenubarContent.displayName = Content.displayName;\\n\\ntype MenubarItemRef = React.ElementRef<typeof Item>;\\ntype MenubarItemProps = React.ComponentPropsWithoutRef<typeof Item> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * MenubarItem component that represents an individual item in the menu.\\n *\\n * @param {MenubarItemProps} props - The props for the MenubarItem component.\\n * @param {boolean} [inset] - Whether to add an inset to the item.\\n *\\n * @example\\n * ```tsx\\n * <MenubarItem>New Tab</MenubarItem>\\n * ```\\n */\\nexport const MenubarItem = forwardRef<MenubarItemRef, MenubarItemProps>(\\n  ({ className, inset, ...props }, ref) => (\\n    <Item ref={ref} className={item({ className, inset })} {...props} />\\n  ),\\n);\\n\\nMenubarItem.displayName = Item.displayName;\\n\\n/**\\n * MenubarGroup component that groups related menu items.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Group>} props - The props for the MenubarGroup component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarGroup>\\n *   {Grouped menu items here}\\n * </MenubarGroup>\\n * ```\\n */\\nexport const MenubarGroup = Group;\\n\\ntype MenubarLabelRef = React.ElementRef<typeof Label>;\\ntype MenubarLabelProps = React.ComponentPropsWithoutRef<typeof Label> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * MenubarLabel component that provides a label for a group of menu items.\\n *\\n * @param {MenubarLabelProps} props - The props for the MenubarLabel component.\\n * @param {boolean} [inset] - Whether to add an inset to the label.\\n *\\n * @example\\n * ```tsx\\n * <MenubarLabel>File</MenubarLabel>\\n * ```\\n */\\nexport const MenubarLabel = forwardRef<MenubarLabelRef, MenubarLabelProps>(\\n  ({ className, inset, ...props }, ref) => (\\n    <Label ref={ref} className={label({ className, inset })} {...props} />\\n  ),\\n);\\n\\nMenubarLabel.displayName = Label.displayName;\\n\\ntype MenubarCheckboxItemRef = React.ElementRef<typeof CheckboxItem>;\\ntype MenubarCheckboxItemProps = React.ComponentPropsWithoutRef<\\n  typeof CheckboxItem\\n>;\\n\\n/**\\n * MenubarCheckboxItem component that represents a checkbox item in the menu.\\n *\\n * @param {MenubarCheckboxItemProps} props - The props for the MenubarCheckboxItem component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarCheckboxItem>Enable Feature</MenubarCheckboxItem>\\n * ```\\n */\\nexport const MenubarCheckboxItem = forwardRef<\\n  MenubarCheckboxItemRef,\\n  MenubarCheckboxItemProps\\n>(({ className, children, checked, ...props }, ref) => (\\n  <CheckboxItem\\n    ref={ref}\\n    checked={checked}\\n    className={checkboxItem({ className })}\\n    {...props}\\n  >\\n    <span className={checkboxItemIndicator()}>\\n      <ItemIndicator>\\n        <CheckIcon className={checkboxItemIcon()} />\\n      </ItemIndicator>\\n    </span>\\n    {children}\\n  </CheckboxItem>\\n));\\n\\nMenubarCheckboxItem.displayName = CheckboxItem.displayName;\\n\\n/**\\n * MenubarRadioGroup component that groups radio items in the menu.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof RadioGroup>} props - The props for the MenubarRadioGroup component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarRadioGroup>\\n *   {Radio items here}\\n * </MenubarRadioGroup>\\n * ```\\n */\\nexport const MenubarRadioGroup = RadioGroup;\\n\\ntype MenubarRadioItemRef = React.ElementRef<typeof RadioItem>;\\ntype MenubarRadioItemProps = React.ComponentPropsWithoutRef<typeof RadioItem>;\\n\\n/**\\n * MenubarRadioItem component that represents a radio item in the menu.\\n *\\n * @param {MenubarRadioItemProps} props - The props for the MenubarRadioItem component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarRadioItem>Option 1</MenubarRadioItem>\\n * ```\\n */\\nexport const MenubarRadioItem = forwardRef<\\n  MenubarRadioItemRef,\\n  MenubarRadioItemProps\\n>(({ className, children, ...props }, ref) => (\\n  <RadioItem ref={ref} className={radioItem({ className })} {...props}>\\n    <span className={radioItemIndicator()}>\\n      <ItemIndicator>\\n        <DotFilledIcon className={radioItemIcon()} />\\n      </ItemIndicator>\\n    </span>\\n    {children}\\n  </RadioItem>\\n));\\n\\nMenubarRadioItem.displayName = RadioItem.displayName;\\n\\ntype MenubarSeparatorRef = React.ElementRef<typeof Separator>;\\ntype MenubarSeparatorProps = React.ComponentPropsWithoutRef<typeof Separator>;\\n\\n/**\\n * MenubarSeparator component that visually separates menu items.\\n *\\n * @param {MenubarSeparatorProps} props - The props for the MenubarSeparator component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarSeparator />\\n * ```\\n */\\nexport const MenubarSeparator = forwardRef<\\n  MenubarSeparatorRef,\\n  MenubarSeparatorProps\\n>(({ className, ...props }, ref) => (\\n  <Separator ref={ref} className={separator({ className })} {...props} />\\n));\\n\\nMenubarSeparator.displayName = Separator.displayName;\\n\\n/**\\n * MenubarSub component that represents a submenu in the menubar.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Sub>} props - The props for the MenubarSub component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarSub>\\n *   {Submenu items here}\\n * </MenubarSub>\\n * ```\\n */\\nexport const MenubarSub = Sub;\\n\\ntype MenubarSubTriggerRef = React.ElementRef<typeof SubTrigger>;\\ntype MenubarSubTriggerProps = React.ComponentPropsWithoutRef<\\n  typeof SubTrigger\\n> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * MenubarSubTrigger component that triggers the display of a submenu.\\n *\\n * @param {MenubarSubTriggerProps} props - The props for the MenubarSubTrigger component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarSubTrigger>More Options</MenubarSubTrigger>\\n * ```\\n */\\nexport const MenubarSubTrigger = forwardRef<\\n  MenubarSubTriggerRef,\\n  MenubarSubTriggerProps\\n>(({ className, inset, children, ...props }, ref) => (\\n  <SubTrigger ref={ref} className={subTrigger({ className, inset })} {...props}>\\n    {children}\\n    <ChevronRightIcon className={subTriggerIcon()} />\\n  </SubTrigger>\\n));\\n\\nMenubarSubTrigger.displayName = SubTrigger.displayName;\\n\\ntype MenubarSubContentRef = React.ElementRef<typeof SubContent>;\\ntype MenubarSubContentProps = React.ComponentPropsWithoutRef<typeof SubContent>;\\n\\n/**\\n * MenubarSubContent component that displays the content of a submenu.\\n *\\n * @param {MenubarSubContentProps} props - The props for the MenubarSubContent component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarSubContent>\\n *   {Submenu items here}\\n * </MenubarSubContent>\\n * ```\\n */\\nexport const MenubarSubContent = forwardRef<\\n  MenubarSubContentRef,\\n  MenubarSubContentProps\\n>(({ className, ...props }, ref) => (\\n  <SubContent ref={ref} className={subContent({ className })} {...props} />\\n));\\n\\nMenubarSubContent.displayName = SubContent.displayName;\\n\\ntype MenubarShortcutProps = React.HTMLAttributes<HTMLSpanElement>;\\n\\n/**\\n * MenubarShortcut component that displays a shortcut key for a menu item.\\n *\\n * @param {MenubarShortcutProps} props - The props for the MenubarShortcut component.\\n *\\n * @example\\n * ```tsx\\n * <MenubarShortcut>âŒ˜T</MenubarShortcut>\\n * ```\\n */\\nexport const MenubarShortcut = ({\\n  className,\\n  ...props\\n}: MenubarShortcutProps) => (\\n  <span className={shortcut({ className })} {...props} />\\n);\\n\\nMenubarShortcut.displayName = 'MenubarShortcut';\\n"
}
