{
  "name": "calendar",
  "type": "component:ui",
  "dependencies": ["react-day-picker"],
  "content": "'use client';\\n\\nimport type { CalendarDay, DayPickerProps, Modifiers } from 'react-day-picker';\\nimport {\\n  ChevronDownIcon,\\n  ChevronLeftIcon,\\n  ChevronRightIcon,\\n  ChevronUpIcon,\\n} from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { DayPicker } from 'react-day-picker';\\nimport { tv } from 'tailwind-variants';\\n\\nimport { Button, buttonStyles } from '@kosori/ui/button';\\n\\nconst calendarStyles = tv({\\n  slots: {\\n    base: 'p-2',\\n    // classes\\n    months: 'relative flex',\\n    month_caption: 'relative mx-10 flex h-7 items-center justify-center',\\n    weekdays: 'flex flex-row',\\n    weekday: 'w-8 select-none text-[0.8rem] font-normal text-grey-text',\\n    month: 'w-full gap-y-4',\\n    caption: 'relative flex items-center justify-center pt-1',\\n    caption_label: 'truncate text-sm font-medium',\\n    button_next: buttonStyles({\\n      variant: 'outline',\\n      icon: true,\\n      size: 'small',\\n      className: clsx(\\n        'absolute right-0 size-7 bg-transparent p-0 opacity-50',\\n        'hover:opacity-100',\\n      ),\\n    }),\\n    button_previous: buttonStyles({\\n      variant: 'outline',\\n      icon: true,\\n      size: 'small',\\n      className: clsx(\\n        'absolute left-0 size-7 bg-transparent opacity-50',\\n        'hover:opacity-100',\\n      ),\\n    }),\\n    nav: 'flex items-start',\\n    month_grid: 'mt-4',\\n    week: 'mt-2 flex w-full',\\n    day: 'rounded-lg p-0',\\n    // day button\\n    day_button_base: 'bg-transparent font-normal text-grey-text',\\n    today: clsx(\\n      'bg-primary-bg font-medium text-primary-solid',\\n      'hover:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n    ),\\n    outside: 'pointer-events-none text-grey-text opacity-50',\\n    disabled: '!bg-transparent !text-grey-line',\\n    hidden: 'invisible',\\n    selected: clsx(\\n      'bg-primary-solid text-primary-base',\\n      'hover:bg-primary-solid-hover',\\n      'active:bg-primary-solid-hover',\\n    ),\\n    range_start: clsx(\\n      'rounded-e-none rounded-s-lg bg-primary-solid text-primary-base',\\n      'hover:bg-primary-solid-hover',\\n      'active:bg-primary-solid-hover',\\n    ),\\n    range_end: clsx(\\n      'rounded-e-lg rounded-s-none bg-primary-solid text-primary-base',\\n      'hover:bg-primary-solid-hover',\\n      'active:bg-primary-solid-hover',\\n    ),\\n    range_middle: clsx(\\n      'rounded-none bg-primary-bg text-primary-text-contrast',\\n      'hover:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n    ),\\n    disabled_range_middle: 'bg-primary-solid',\\n    range_start_end: 'rounded-lg',\\n  },\\n});\\n\\nconst {\\n  base,\\n  months,\\n  month_caption,\\n  weekdays,\\n  weekday,\\n  month,\\n  caption,\\n  caption_label,\\n  button_next,\\n  button_previous,\\n  nav,\\n  month_grid,\\n  week,\\n  day,\\n  day_button_base,\\n  today,\\n  outside,\\n  disabled,\\n  hidden,\\n  selected,\\n  range_start,\\n  range_end,\\n  range_middle,\\n  disabled_range_middle,\\n  range_start_end,\\n} = calendarStyles();\\n\\nexport type CalendarProps = DayPickerProps;\\n\\nexport const Calendar = ({\\n  className,\\n  classNames,\\n  showOutsideDays = true,\\n  ...props\\n}: CalendarProps) => {\\n  return (\\n    <DayPicker\\n      className={base({ className })}\\n      classNames={{\\n        months: months(),\\n        month_caption: month_caption(),\\n        weekdays: weekdays(),\\n        weekday: weekday(),\\n        month: month(),\\n        caption: caption(),\\n        caption_label: caption_label(),\\n        button_next: button_next(),\\n        button_previous: button_previous(),\\n        nav: nav(),\\n        month_grid: month_grid(),\\n        week: week(),\\n        day: day(),\\n        ...classNames,\\n      }}\\n      components={{\\n        DayButton,\\n        Chevron,\\n      }}\\n      showOutsideDays={showOutsideDays}\\n      {...props}\\n    />\\n  );\\n};\\n\\nCalendar.displayName = 'Calendar';\\n\\ntype DayButtonProps = {\\n  day: CalendarDay;\\n  modifiers: Modifiers;\\n} & JSX.IntrinsicElements['button'];\\n\\nconst DayButton = ({\\n  modifiers,\\n  className,\\n  ...buttonProps\\n}: DayButtonProps) => {\\n  return (\\n    <Button\\n      icon\\n      className={clsx(\\n        className,\\n        day_button_base(),\\n        modifiers.today && today(),\\n        modifiers.outside && outside(),\\n        modifiers.disabled && disabled(),\\n        modifiers.hidden && hidden(),\\n        modifiers.selected && selected(),\\n        modifiers.range_start && range_start(),\\n        modifiers.range_end && range_end(),\\n        modifiers.range_middle && range_middle(),\\n        modifiers.disabled && modifiers.range_middle && disabled_range_middle(),\\n        modifiers.range_start && modifiers.range_end && range_start_end(),\\n      )}\\n      size='small'\\n      variant='ghost'\\n      {...buttonProps}\\n      aria-disabled={modifiers.disabled ?? buttonProps['aria-disabled']}\\n      aria-hidden={modifiers.hidden ?? buttonProps['aria-hidden']}\\n      aria-selected={modifiers.selected ?? buttonProps['aria-selected']}\\n    />\\n  );\\n};\\n\\ntype ChevronProps = {\\n  className?: string;\\n  size?: number;\\n  disabled?: boolean;\\n  orientation?: 'up' | 'down' | 'left' | 'right';\\n};\\n\\nconst Chevron = ({ orientation, disabled, className }: ChevronProps) => {\\n  const Component =\\n    orientation === 'left'\\n      ? ChevronLeftIcon\\n      : orientation === 'right'\\n        ? ChevronRightIcon\\n        : orientation === 'up'\\n          ? ChevronUpIcon\\n          : ChevronDownIcon;\\n\\n  return (\\n    <Component aria-disabled={disabled} className={clsx('size-4', className)} />\\n  );\\n};\\n"
}
