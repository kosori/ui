{
  "name": "form",
  "type": "component:ui",
  "dependencies": [
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "react-hook-form",
    "@hookform/resolvers"
  ],
  "content": "import type { Root } from '@radix-ui/react-label';\\nimport type { ControllerProps, FieldPath, FieldValues } from 'react-hook-form';\\nimport { createContext, forwardRef, useContext, useId } from 'react';\\nimport { Slot } from '@radix-ui/react-slot';\\nimport { Controller, FormProvider, useFormContext } from 'react-hook-form';\\nimport { tv } from 'tailwind-variants';\\n\\nimport { Label } from '@kosori/ui/label';\\n\\nconst formStyles = tv({\\n  slots: {\\n    item: 'space-y-2',\\n    label: '',\\n    description: 'text-sm text-grey-text',\\n    message: 'text-sm font-medium text-error-solid',\\n  },\\n  variants: {\\n    error: {\\n      true: {\\n        label: 'text-error-solid',\\n      },\\n    },\\n  },\\n});\\n\\nconst { item, label, description, message } = formStyles();\\n\\n/**\\n * Form component that provides context for form fields.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof FormProvider>} props - The props for the Form component.\\n *\\n * @example\\n * <>\\n *   <Form>\\n *     <FormField control={...} name='...' render={() => <FormControl />} />\\n *   </Form>\\n * </>\\n *\\n * @see {@link https://dub.sh/ui-form Form Docs} for further information.\\n */\\nexport const Form = FormProvider;\\n\\ntype FormFieldContextValue<\\n  TFieldValues extends FieldValues = FieldValues,\\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\\n> = {\\n  name: TName;\\n};\\n\\nexport const FormFieldContext = createContext<FormFieldContextValue>(\\n  {} as FormFieldContextValue,\\n);\\n\\n/**\\n * FormField component that wraps a Controller from react-hook-form.\\n *\\n * @param {ControllerProps<TFieldValues, TName>} props - The props for the FormField component.\\n *\\n * @example\\n * <FormField\\n *   control={...}\\n *   name='...'\\n *   render={...} />\\n * </>\\n */\\nexport const FormField = <\\n  TFieldValues extends FieldValues = FieldValues,\\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\\n>({\\n  ...props\\n}: ControllerProps<TFieldValues, TName>) => {\\n  return (\\n    <FormFieldContext.Provider value={{ name: props.name }}>\\n      <Controller {...props} />\\n    </FormFieldContext.Provider>\\n  );\\n};\\n\\ntype FormItemContextValue = {\\n  id: string;\\n};\\n\\nexport const FormItemContext = createContext<FormItemContextValue>(\\n  {} as FormItemContextValue,\\n);\\n\\nexport const useFormField = () => {\\n  const fieldContext = useContext(FormFieldContext);\\n  const itemContext = useContext(FormItemContext);\\n  const { getFieldState, formState } = useFormContext();\\n\\n  const fieldState = getFieldState(fieldContext.name, formState);\\n\\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\\n  if (!fieldContext) {\\n    throw new Error('useFormField should be used within <FormField>');\\n  }\\n\\n  const { id } = itemContext;\\n\\n  return {\\n    id,\\n    name: fieldContext.name,\\n    formItemId: `${id}-form-item`,\\n    formDescriptionId: `${id}-form-item-description`,\\n    formMessageId: `${id}-form-item-message`,\\n    ...fieldState,\\n  };\\n};\\n\\ntype FormItemRef = HTMLDivElement;\\ntype FormItemProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * FormItem component that serves as a wrapper for form fields.\\n *\\n * @param {FormItemProps} props - The props for the FormItem component.\\n *\\n * @example\\n * <>\\n *   <FormItem>\\n *     <FormLabel />\\n *     <FormControl />\\n *     <FormDescription />\\n *     <FormMessage />\\n *   </FormItem>\\n * </>\\n */\\nexport const FormItem = forwardRef<FormItemRef, FormItemProps>(\\n  ({ className, ...props }, ref) => {\\n    const id = useId();\\n\\n    return (\\n      <FormItemContext.Provider value={{ id }}>\\n        <div ref={ref} className={item({ className })} {...props} />\\n      </FormItemContext.Provider>\\n    );\\n  },\\n);\\n\\nFormItem.displayName = 'FormItem';\\n\\ntype FormLabelRef = React.ElementRef<typeof Root>;\\ntype FormLabelProps = React.ComponentPropsWithoutRef<typeof Root>;\\n\\n/**\\n * FormLabel component that renders a label for the form field.\\n *\\n * @param {FormLabelProps} props - The props for the FormLabel component.\\n *\\n * @example\\n * <FormLabel>Label</FormLabel>\\n */\\nexport const FormLabel = forwardRef<FormLabelRef, FormLabelProps>(\\n  ({ className, ...props }, ref) => {\\n    const { error, formItemId } = useFormField();\\n\\n    return (\\n      <Label\\n        ref={ref}\\n        className={label({ className, error: error ? true : false })}\\n        htmlFor={formItemId}\\n        {...props}\\n      />\\n    );\\n  },\\n);\\n\\nFormLabel.displayName = 'FormLabel';\\n\\ntype FormControlRef = React.ElementRef<typeof Slot>;\\ntype FormControlProps = React.ComponentPropsWithoutRef<typeof Slot>;\\n\\n/**\\n * FormControl component that wraps the form control element.\\n *\\n * @param {FormControlProps} props - The props for the FormControl component.\\n *\\n * @example\\n * <>\\n *   <FormControl>\\n *     {...}\\n *   </FormControl>\\n */\\nexport const FormControl = forwardRef<FormControlRef, FormControlProps>(\\n  ({ ...props }, ref) => {\\n    const { error, formItemId, formDescriptionId, formMessageId } =\\n      useFormField();\\n\\n    return (\\n      <Slot\\n        ref={ref}\\n        aria-describedby={\\n          !error\\n            ? `${formDescriptionId}`\\n            : `${formDescriptionId} ${formMessageId}`\\n        }\\n        aria-invalid={!!error}\\n        id={formItemId}\\n        {...props}\\n      />\\n    );\\n  },\\n);\\n\\nFormControl.displayName = 'FormControl';\\n\\ntype FormDescriptionRef = HTMLParagraphElement;\\ntype FormDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>;\\n\\n/**\\n * FormDescription component that provides additional information about the form field.\\n *\\n * @param {FormDescriptionProps} props - The props for the FormDescription component.\\n *\\n * @example\\n * <FormDescription>Description</FormDescription>\\n */\\nexport const FormDescription = forwardRef<\\n  FormDescriptionRef,\\n  FormDescriptionProps\\n>(({ className, ...props }, ref) => {\\n  const { formDescriptionId } = useFormField();\\n\\n  return (\\n    <p\\n      ref={ref}\\n      className={description({ className })}\\n      id={formDescriptionId}\\n      {...props}\\n    />\\n  );\\n});\\n\\nFormDescription.displayName = 'FormDescription';\\n\\ntype FormMessageRef = HTMLParagraphElement;\\ntype FormMessageProps = React.HTMLAttributes<HTMLParagraphElement>;\\n\\n/**\\n * FormMessage component that displays error messages for the form field.\\n *\\n * @param {FormMessageProps} props - The props for the FormMessage component.\\n *\\n * @example\\n * <FormMessage>Error message</FormMessage>\\n */\\nexport const FormMessage = forwardRef<FormMessageRef, FormMessageProps>(\\n  ({ className, children, ...props }, ref) => {\\n    const { error, formMessageId } = useFormField();\\n    const body = error ? String(error.message) : children;\\n\\n    if (!body) {\\n      return null;\\n    }\\n\\n    return (\\n      <p\\n        ref={ref}\\n        className={message({ className })}\\n        id={formMessageId}\\n        {...props}\\n      >\\n        {body}\\n      </p>\\n    );\\n  },\\n);\\n\\nFormMessage.displayName = 'FormMessage';\\n"
}
