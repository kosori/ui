{
  "name": "context-menu",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-context-menu"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport {\\n  CheckboxItem,\\n  Content,\\n  Group,\\n  Item,\\n  ItemIndicator,\\n  Label,\\n  Portal,\\n  RadioGroup,\\n  RadioItem,\\n  Root,\\n  Separator,\\n  Sub,\\n  SubContent,\\n  SubTrigger,\\n  Trigger,\\n} from '@radix-ui/react-context-menu';\\nimport {\\n  CheckIcon,\\n  ChevronRightIcon,\\n  DotFilledIcon,\\n} from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst contextMenuStyles = tv({\\n  slots: {\\n    content: clsx(\\n      'z-50 min-w-32 overflow-hidden rounded-lg border bg-grey-base p-1 shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n    ),\\n    item: clsx(\\n      'group relative flex h-8 cursor-pointer select-none items-center rounded-md px-2 text-sm outline-none transition-colors',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    label:\\n      'flex h-8 select-none items-center px-2 text-xs font-medium text-grey-text',\\n    checkboxItem: clsx(\\n      'group relative flex h-8 cursor-pointer select-none items-center rounded-md pl-8 pr-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    checkboxItemIndicator:\\n      'absolute left-2 flex size-3.5 items-center justify-center',\\n    checkboxItemIcon: 'size-4',\\n    radioItem: clsx(\\n      'relative flex h-8 cursor-pointer select-none items-center rounded-md pl-8 pr-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'active:bg-primary-bg-active',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    radioItemIndicator:\\n      'absolute left-2 flex size-3.5 items-center justify-center',\\n    radioItemIcon: 'size-4',\\n    separator: '-mx-2 my-1 h-px bg-grey-line',\\n    subTrigger: clsx(\\n      'group flex h-8 cursor-pointer select-none items-center rounded-md px-2 text-sm outline-none transition-colors',\\n      'focus:bg-primary-bg-hover',\\n      'data-[state=open]:bg-primary-bg-hover',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    subTriggerIcon: clsx(\\n      'ml-auto size-4',\\n      'group-data-[disabled]:text-grey-solid',\\n    ),\\n    subContent: clsx(\\n      'z-50 min-w-32 overflow-hidden rounded-lg border border-grey-line bg-grey-base p-1 shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n    ),\\n    shortcut: clsx(\\n      'ml-auto text-xs tracking-widest text-grey-text',\\n      'group-data-[disabled]:text-grey-solid',\\n    ),\\n  },\\n  variants: {\\n    inset: {\\n      true: {\\n        item: 'pl-8',\\n        label: 'pl-8',\\n        subTrigger: 'pl-8',\\n      },\\n    },\\n  },\\n});\\n\\nconst {\\n  content,\\n  item,\\n  label,\\n  checkboxItem,\\n  checkboxItemIndicator,\\n  checkboxItemIcon,\\n  radioItem,\\n  radioItemIndicator,\\n  radioItemIcon,\\n  separator,\\n  subTrigger,\\n  subTriggerIcon,\\n  subContent,\\n  shortcut,\\n} = contextMenuStyles();\\n\\n/**\\n * ContextMenu component that provides a context menu for user interactions.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - The props for the ContextMenu component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenu>\\n *   <ContextMenuTrigger>Right click</ContextMenuTrigger>\\n *   <ContextMenuContent>\\n *     <ContextMenuItem>Profile</ContextMenuItem>\\n *     <ContextMenuItem>Billing</ContextMenuItem>\\n *     <ContextMenuItem>Team</ContextMenuItem>\\n *     <ContextMenuItem>Subscription</ContextMenuItem>\\n *   </ContextMenuContent>\\n * </ContextMenu>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-context-menu Context Menu Docs} for further information.\\n */\\nexport const ContextMenu = Root;\\n\\n/**\\n * ContextMenuTrigger component that serves as the trigger for the ContextMenu.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Trigger>} props - The props for the ContextMenuTrigger component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuTrigger>Right click</ContextMenuTrigger>\\n * ```\\n */\\nexport const ContextMenuTrigger = Trigger;\\n\\n/**\\n * ContextMenuPortal component that renders the ContextMenu in a portal.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Portal>} props - The props for the ContextMenuPortal component.\\n */\\nexport const ContextMenuPortal = Portal;\\n\\ntype ContextMenuContentRef = React.ElementRef<typeof Content>;\\ntype ContextMenuContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * ContextMenuContent component that wraps the content of the ContextMenu.\\n *\\n * @param {ContextMenuContentProps} props - The props for the ContextMenuContent component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuContent>\\n *   <ContextMenuItem>Profile</ContextMenuItem>\\n * </ContextMenuContent>\\n * ```\\n */\\nexport const ContextMenuContent = forwardRef<\\n  ContextMenuContentRef,\\n  ContextMenuContentProps\\n>(({ className, ...props }, ref) => (\\n  <Portal>\\n    <Content ref={ref} className={content({ className })} {...props} />\\n  </Portal>\\n));\\n\\nContextMenuContent.displayName = Content.displayName;\\n\\ntype ContextMenuItemRef = React.ElementRef<typeof Item>;\\ntype ContextMenuItemProps = React.ComponentPropsWithoutRef<typeof Item> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * ContextMenuItem component that represents a single item in the ContextMenu.\\n *\\n * @param {ContextMenuItemProps} props - The props for the ContextMenuItem component.\\n * @param {boolean} [props.inset] - Whether the item is inset.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuItem>Profile</ContextMenuItem>\\n * ```\\n */\\nexport const ContextMenuItem = forwardRef<\\n  ContextMenuItemRef,\\n  ContextMenuItemProps\\n>(({ className, inset, ...props }, ref) => (\\n  <Item ref={ref} className={item({ className, inset })} {...props} />\\n));\\n\\nContextMenuItem.displayName = Item.displayName;\\n\\n/**\\n * ContextMenuGroup component that groups related command items.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Group>} props - The props for the ContextMenuGroup component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuGroup>...</ContextMenuGroup>\\n * ```\\n */\\nexport const ContextMenuGroup = Group;\\n\\ntype ContextMenuLabelRef = React.ElementRef<typeof Label>;\\ntype ContextMenuLabelProps = React.ComponentPropsWithoutRef<typeof Label> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * ContextMenuLabel component that displays a label for a group of items in the ContextMenu.\\n *\\n * @param {ContextMenuLabelProps} props - The props for the ContextMenuLabel component.\\n * @param {boolean} [props.inset] - Whether the label is inset.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuLabel>Settings</ContextMenuLabel>\\n * ```\\n */\\nexport const ContextMenuLabel = forwardRef<\\n  ContextMenuLabelRef,\\n  ContextMenuLabelProps\\n>(({ className, inset, ...props }, ref) => (\\n  <Label ref={ref} className={label({ className, inset })} {...props} />\\n));\\n\\nContextMenuLabel.displayName = Label.displayName;\\n\\ntype ContextMenuCheckboxItemRef = React.ElementRef<typeof CheckboxItem>;\\ntype ContextMenuCheckboxItemProps = React.ComponentPropsWithoutRef<\\n  typeof CheckboxItem\\n>;\\n\\n/**\\n * ContextMenuCheckboxItem component that represents a checkbox item in the ContextMenu.\\n *\\n * @param {ContextMenuCheckboxItemProps} props - The props for the ContextMenuCheckboxItem component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuCheckboxItem checked={true}>Enable Notifications</ContextMenuCheckboxItem>\\n * ```\\n */\\nexport const ContextMenuCheckboxItem = forwardRef<\\n  ContextMenuCheckboxItemRef,\\n  ContextMenuCheckboxItemProps\\n>(({ className, children, checked, ...props }, ref) => (\\n  <CheckboxItem\\n    ref={ref}\\n    checked={checked}\\n    className={checkboxItem({ className })}\\n    {...props}\\n  >\\n    <span className={checkboxItemIndicator()}>\\n      <ItemIndicator>\\n        <CheckIcon className={checkboxItemIcon()} />\\n      </ItemIndicator>\\n    </span>\\n    {children}\\n  </CheckboxItem>\\n));\\n\\nContextMenuCheckboxItem.displayName = CheckboxItem.displayName;\\n\\n/**\\n * ContextMenuRadioGroup component that represents a group of radio items in the ContextMenu.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof RadioGroup>} props - The props for the ContextMenuRadioGroup component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuRadioGroup>...</ContextMenuRadioGroup>\\n * ```\\n */\\nexport const ContextMenuRadioGroup = RadioGroup;\\n\\ntype ContextMenuRadioItemRef = React.ElementRef<typeof RadioItem>;\\ntype ContextMenuRadioItemProps = React.ComponentPropsWithoutRef<\\n  typeof RadioItem\\n>;\\n\\n/**\\n * ContextMenuRadioItem component that represents a radio item in the ContextMenu.\\n *\\n * @param {ContextMenuRadioItemProps} props - The props for the ContextMenuRadioItem component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuRadioItem>Option 1</ContextMenuRadioItem>\\n * ```\\n */\\nexport const ContextMenuRadioItem = forwardRef<\\n  ContextMenuRadioItemRef,\\n  ContextMenuRadioItemProps\\n>(({ className, children, ...props }, ref) => (\\n  <RadioItem ref={ref} className={radioItem({ className })} {...props}>\\n    <span className={radioItemIndicator()}>\\n      <ItemIndicator>\\n        <DotFilledIcon className={radioItemIcon()} />\\n      </ItemIndicator>\\n    </span>\\n    {children}\\n  </RadioItem>\\n));\\n\\nContextMenuRadioItem.displayName = RadioItem.displayName;\\n\\ntype ContextMenuSeparatorRef = React.ElementRef<typeof Separator>;\\ntype ContextMenuSeparatorProps = React.ComponentPropsWithoutRef<\\n  typeof Separator\\n>;\\n\\n/**\\n * ContextMenuSeparator component that visually separates items in the ContextMenu.\\n *\\n * @param {ContextMenuSeparatorProps} props - The props for the ContextMenuSeparator component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuSeparator />\\n * ```\\n */\\nexport const ContextMenuSeparator = forwardRef<\\n  ContextMenuSeparatorRef,\\n  ContextMenuSeparatorProps\\n>(({ className, ...props }, ref) => (\\n  <Separator ref={ref} className={separator({ className })} {...props} />\\n));\\n\\nContextMenuSeparator.displayName = Separator.displayName;\\n\\n/**\\n * ContextMenuSub component that represents a sub-menu in the ContextMenu.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Sub>} props - The props for the ContextMenuSub component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuSub>...</ContextMenuSub>\\n * ```\\n */\\nexport const ContextMenuSub = Sub;\\n\\ntype ContextMenuSubTriggerRef = React.ElementRef<typeof SubTrigger>;\\ntype ContextMenuSubTriggerProps = React.ComponentPropsWithoutRef<\\n  typeof SubTrigger\\n> & {\\n  inset?: boolean;\\n};\\n\\n/**\\n * ContextMenuSubTrigger component that serves as the trigger for a sub-menu in the ContextMenu.\\n *\\n * @param {ContextMenuSubTriggerProps} props - The props for the ContextMenuSubTrigger component.\\n * @param {boolean} [props.inset] - Whether the trigger is inset.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuSubTrigger>More Options</ContextMenuSubTrigger>\\n * ```\\n */\\nexport const ContextMenuSubTrigger = forwardRef<\\n  ContextMenuSubTriggerRef,\\n  ContextMenuSubTriggerProps\\n>(({ className, inset, children, ...props }, ref) => (\\n  <SubTrigger ref={ref} className={subTrigger({ className, inset })} {...props}>\\n    {children}\\n    <ChevronRightIcon className={subTriggerIcon()} />\\n  </SubTrigger>\\n));\\n\\nContextMenuSubTrigger.displayName = SubTrigger.displayName;\\n\\ntype ContextMenuSubContentRef = React.ElementRef<typeof SubContent>;\\ntype ContextMenuSubContentProps = React.ComponentPropsWithoutRef<\\n  typeof SubContent\\n>;\\n\\n/**\\n * ContextMenuSubContent component that wraps the content of a sub-menu in the ContextMenu.\\n *\\n * @param {ContextMenuSubContentProps} props - The props for the ContextMenuSubContent component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuSubContent>...</ContextMenuSubContent>\\n * ```\\n */\\nexport const ContextMenuSubContent = forwardRef<\\n  ContextMenuSubContentRef,\\n  ContextMenuSubContentProps\\n>(({ className, ...props }, ref) => (\\n  <SubContent ref={ref} className={subContent({ className })} {...props} />\\n));\\n\\nContextMenuSubContent.displayName = SubContent.displayName;\\n\\ntype ContextMenuShortcutProps = React.HTMLAttributes<HTMLSpanElement>;\\n\\n/**\\n * ContextMenuShortcut component that displays a keyboard shortcut for a command item.\\n *\\n * @param {ContextMenuShortcutProps} props - The props for the ContextMenuShortcut component.\\n *\\n * @example\\n * ```tsx\\n * <ContextMenuShortcut>⌘K</ContextMenuShortcut>\\n * ```\\n */\\nexport const ContextMenuShortcut = ({\\n  className,\\n  ...props\\n}: ContextMenuShortcutProps) => (\\n  <span className={shortcut({ className })} {...props} />\\n);\\n\\nContextMenuShortcut.displayName = 'ContextMenuShortcut';\\n"
}
