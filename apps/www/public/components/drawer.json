{
  "name": "drawer",
  "type": "component:ui",
  "dependencies": ["vaul"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\nimport { Drawer as DrawerPrimitive } from 'vaul';\\n\\nconst drawerStyles = tv({\\n  slots: {\\n    overlay: 'fixed inset-0 z-50 bg-black-a6',\\n    content:\\n      'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border border-grey-line bg-grey-base',\\n    contentHandle: 'bg-grey-bg-hover mx-auto mt-4 h-2 w-[100px] rounded-full',\\n    header: clsx('grid gap-1.5 p-4 text-center', 'sm:text-left'),\\n    title: 'text-lg font-semibold leading-none tracking-tight',\\n    description: 'text-sm text-grey-text',\\n    footer: 'mt-auto flex flex-col gap-2 p-4',\\n  },\\n});\\n\\nconst { overlay, content, contentHandle, header, title, description, footer } =\\n  drawerStyles();\\n\\ntype DrawerProps = React.ComponentProps<typeof DrawerPrimitive.Root>;\\n\\n/**\\n * Drawer component that provides a sliding panel for displaying content.\\n *\\n * @param {DrawerProps} props - The props for the Drawer component.\\n * @param {boolean} [props.shouldScaleBackground=true] - Whether to scale the background when the drawer is open.\\n *\\n * @example\\n * ```tsx\\n * <Drawer>\\n *   <DrawerTrigger>Open</DrawerTrigger>\\n *   <DrawerContent>\\n *     <DrawerHeader>\\n *       <DrawerTitle>Are you absolutely sure?</DrawerTitle>\\n *       <DrawerDescription>This action cannot be undone.</DrawerDescription>\\n *     </DrawerHeader>\\n *     <DrawerFooter>\\n *       <Button>Submit</Button>\\n *       <DrawerClose>\\n *         <Button variant='outline'>Cancel</Button>\\n *       </DrawerClose>\\n *     </DrawerFooter>\\n *   </DrawerContent>\\n * </Drawer>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-drawer Drawer Docs} for further information.\\n */\\nexport const Drawer = ({\\n  shouldScaleBackground = true,\\n  ...props\\n}: DrawerProps) => (\\n  <DrawerPrimitive.Root\\n    shouldScaleBackground={shouldScaleBackground}\\n    {...props}\\n  />\\n);\\n\\nDrawer.displayName = 'Drawer';\\n\\n/**\\n * DrawerTrigger component that serves as the trigger for the Drawer.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Trigger>} props - The props for the DrawerTrigger component.\\n *\\n * @example\\n * ```tsx\\n * <DrawerTrigger>Open</DrawerTrigger>\\n * ```\\n */\\nexport const DrawerTrigger = DrawerPrimitive.Trigger;\\n\\n/**\\n * DrawerPortal component that renders the Drawer in a portal.\\n *\\n * @param {DrawerPortalProps} props - The props for the DrawerPortal component.\\n */\\nexport const DrawerPortal = DrawerPrimitive.Portal;\\n\\ntype DrawerOverlayRef = React.ElementRef<typeof DrawerPrimitive.Overlay>;\\ntype DrawerOverlayProps = React.ComponentPropsWithoutRef<\\n  typeof DrawerPrimitive.Overlay\\n>;\\n\\n/**\\n * DrawerOverlay component that covers the background when the Drawer is open.\\n *\\n * @param {DrawerOverlayProps} props - The props for the DrawerOverlay component.\\n *\\n * @example\\n * ```tsx\\n * <DrawerOverlay />\\n * ```\\n */\\nexport const DrawerOverlay = forwardRef<DrawerOverlayRef, DrawerOverlayProps>(\\n  ({ className, ...props }, ref) => (\\n    <DrawerPrimitive.Overlay\\n      ref={ref}\\n      className={overlay({ className })}\\n      {...props}\\n    />\\n  ),\\n);\\n\\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\\n\\ntype DrawerContentRef = React.ElementRef<typeof DrawerPrimitive.Content>;\\ntype DrawerContentProps = React.ComponentPropsWithoutRef<\\n  typeof DrawerPrimitive.Content\\n>;\\n\\n/**\\n * DrawerContent component that wraps the content of the Drawer.\\n *\\n * @param {DrawerContentProps} props - The props for the DrawerContent component.\\n * @param {React.ReactNode} props.children - The content to be rendered inside the DrawerContent.\\n *\\n * @example\\n * ```tsx\\n * <DrawerContent>\\n *   <p>Your content goes here.</p>\\n * </DrawerContent>\\n * ```\\n */\\nexport const DrawerContent = forwardRef<DrawerContentRef, DrawerContentProps>(\\n  ({ className, children, ...props }, ref) => (\\n    <DrawerPortal>\\n      <DrawerOverlay />\\n      <DrawerPrimitive.Content\\n        ref={ref}\\n        className={content({ className })}\\n        {...props}\\n      >\\n        <div className={contentHandle()} />\\n        {children}\\n      </DrawerPrimitive.Content>\\n    </DrawerPortal>\\n  ),\\n);\\n\\nDrawerContent.displayName = 'DrawerContent';\\n\\ntype DrawerHeaderProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * DrawerHeader component that wraps the header content of the Drawer.\\n *\\n * @param {DrawerHeaderProps} props - The props for the DrawerHeader component.\\n *\\n * @example\\n * ```tsx\\n * <DrawerHeader>\\n *   <DrawerTitle>Drawer Title</DrawerTitle>\\n * </DrawerHeader>\\n * ```\\n */\\nexport const DrawerHeader = ({ className, ...props }: DrawerHeaderProps) => (\\n  <div className={header({ className })} {...props} />\\n);\\n\\nDrawerHeader.displayName = 'DrawerHeader';\\n\\ntype DrawerTitleRef = React.ElementRef<typeof DrawerPrimitive.Title>;\\ntype DrawerTitleProps = React.ComponentPropsWithoutRef<\\n  typeof DrawerPrimitive.Title\\n>;\\n\\n/**\\n * DrawerTitle component that displays the title of the Drawer.\\n *\\n * @param {DrawerTitleProps} props - The props for the DrawerTitle component.\\n *\\n * @example\\n * ```tsx\\n * <DrawerTitle>Drawer Title</DrawerTitle>\\n * ```\\n */\\nexport const DrawerTitle = forwardRef<DrawerTitleRef, DrawerTitleProps>(\\n  ({ className, ...props }, ref) => (\\n    <DrawerPrimitive.Title\\n      ref={ref}\\n      className={title({ className })}\\n      {...props}\\n    />\\n  ),\\n);\\n\\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\\n\\ntype DrawerDescriptionRef = React.ElementRef<\\n  typeof DrawerPrimitive.Description\\n>;\\ntype DrawerDescriptionProps = React.ComponentPropsWithoutRef<\\n  typeof DrawerPrimitive.Description\\n>;\\n\\n/**\\n * DrawerDescription component that provides a description for the Drawer.\\n *\\n * @param {DrawerDescriptionProps} props - The props for the DrawerDescription component.\\n *\\n * @example\\n * ```tsx\\n * <DrawerDescription>Drawer Description</DrawerDescription>\\n * ```\\n */\\nexport const DrawerDescription = forwardRef<\\n  DrawerDescriptionRef,\\n  DrawerDescriptionProps\\n>(({ className, ...props }, ref) => (\\n  <DrawerPrimitive.Description\\n    ref={ref}\\n    className={description({ className })}\\n    {...props}\\n  />\\n));\\n\\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\\n\\ntype DrawerFooterProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * DrawerFooter component that wraps the footer content of the Drawer.\\n *\\n * @param {DrawerFooterProps} props - The props for the DrawerFooter component.\\n *\\n * @example\\n * ```tsx\\n * <DrawerFooter>\\n *   <Button>Close</Button>\\n * </DrawerFooter>\\n * ```\\n */\\nexport const DrawerFooter = ({ className, ...props }: DrawerFooterProps) => (\\n  <div className={footer({ className })} {...props} />\\n);\\n\\nDrawerFooter.displayName = 'DrawerFooter';\\n\\nexport const DrawerClose = DrawerPrimitive.Close;\\n"
}
