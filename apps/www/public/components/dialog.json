{
  "name": "dialog",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-dialog"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport {\\n  Close,\\n  Content,\\n  Description,\\n  Overlay,\\n  Portal,\\n  Root,\\n  Title,\\n  Trigger,\\n} from '@radix-ui/react-dialog';\\nimport { Cross2Icon } from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst dialogStyles = tv({\\n  slots: {\\n    overlay: clsx(\\n      'fixed inset-0 z-50 bg-black-a6 backdrop-blur-sm',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0',\\n    ),\\n    content: clsx(\\n      'fixed left-1/2 top-1/2 z-50 grid w-full -translate-x-1/2 -translate-y-1/2 gap-4 border border-grey-line bg-grey-base p-6 shadow-lg duration-200',\\n      'sm:max-w-lg sm:rounded-lg',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]',\\n    ),\\n    contentClose: clsx(\\n      'absolute right-4 top-4 rounded ring-offset-grey-bg transition-opacity',\\n      'focus:outline focus:outline-grey-focus-ring',\\n      'disabled:cursor-not-allowed disabled:text-grey-text',\\n    ),\\n    contentIcon: 'size-4',\\n    header: clsx('flex flex-col gap-y-1.5 text-center', 'sm:text-left'),\\n    title: 'text-lg font-semibold leading-none tracking-tight',\\n    description: 'text-sm text-grey-text',\\n    footer: clsx(\\n      'flex flex-col-reverse',\\n      'sm:flex-row sm:justify-end sm:gap-x-2',\\n    ),\\n  },\\n});\\n\\nconst {\\n  overlay,\\n  content,\\n  contentClose,\\n  contentIcon,\\n  header,\\n  title,\\n  description,\\n  footer,\\n} = dialogStyles();\\n\\n/**\\n * Dialog component that provides a modal dialog for user interactions.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - The props for the Dialog component.\\n *\\n * @example\\n * ```tsx\\n * <Dialog>\\n *   <DialogTrigger>Open</DialogTrigger>\\n *   <DialogContent>\\n *     <DialogHeader>\\n *       <DialogTitle>Are you absolutely sure?</DialogTitle>\\n *       <DialogDescription>\\n *         This action cannot be undone. This will permanently delete your account\\n *         and remove your data from our servers.\\n *       </DialogDescription>\\n *     </DialogHeader>\\n *   </DialogContent>\\n * </Dialog>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-dialog Dialog Docs} for further information.\\n */\\nexport const Dialog = Root;\\n\\n/**\\n * DialogTrigger component that serves as the trigger for the Dialog.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Trigger>} props - The props for the DialogTrigger component.\\n *\\n * @example\\n * ```tsx\\n * <DialogTrigger>Open</DialogTrigger>\\n * ```\\n */\\nexport const DialogTrigger = Trigger;\\n\\n/**\\n * DialogPortal component that renders the Dialog in a portal.\\n *\\n * @param {DialogPortalProps} props - The props for the DialogPortal component.\\n */\\nexport const DialogPortal = Portal;\\n\\ntype DialogOverlayRef = React.ElementRef<typeof Overlay>;\\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<typeof Overlay>;\\n\\n/**\\n * DialogOverlay component that covers the background when the Dialog is open.\\n *\\n * @param {DialogOverlayProps} props - The props for the DialogOverlay component.\\n *\\n * @example\\n * ```tsx\\n * <DialogOverlay />\\n * ```\\n */\\nexport const DialogOverlay = forwardRef<DialogOverlayRef, DialogOverlayProps>(\\n  ({ className, ...props }, ref) => (\\n    <Overlay ref={ref} className={overlay({ className })} {...props} />\\n  ),\\n);\\n\\nDialogOverlay.displayName = Overlay.displayName;\\n\\ntype DialogContentRef = React.ElementRef<typeof Content>;\\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * DialogContent component that wraps the content of the Dialog.\\n *\\n * @param {DialogContentProps} props - The props for the DialogContent component.\\n *\\n * @example\\n * ```tsx\\n * <DialogContent>\\n *   <DialogHeader>\\n *     <DialogTitle>Dialog Title</DialogTitle>\\n *     <DialogDescription>Dialog Description</DialogDescription>\\n *   </DialogHeader>\\n * </DialogContent>\\n * ```\\n */\\nexport const DialogContent = forwardRef<DialogContentRef, DialogContentProps>(\\n  ({ className, children, ...props }, ref) => (\\n    <DialogPortal>\\n      <DialogOverlay />\\n      <Content ref={ref} className={content({ className })} {...props}>\\n        {children}\\n        <Close className={contentClose()}>\\n          <Cross2Icon className={contentIcon()} />\\n          <span className='sr-only'>Close</span>\\n        </Close>\\n      </Content>\\n    </DialogPortal>\\n  ),\\n);\\n\\nDialogContent.displayName = Content.displayName;\\n\\n/**\\n * DialogClose component that closes the Dialog.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Close>} props - The props for the DialogClose component.\\n *\\n * @example\\n * ```tsx\\n * <DialogClose />\\n * ```\\n */\\nexport const DialogClose = Close;\\n\\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * DialogHeader component that wraps the header content of the Dialog.\\n *\\n * @param {DialogHeaderProps} props - The props for the DialogHeader component.\\n *\\n * @example\\n * ```tsx\\n * <DialogHeader>\\n *   <DialogTitle>Dialog Title</DialogTitle>\\n *   <DialogDescription>Dialog Description</DialogDescription>\\n * </DialogHeader>\\n * ```\\n */\\nexport const DialogHeader = ({ className, ...props }: DialogHeaderProps) => (\\n  <div className={header({ className })} {...props} />\\n);\\n\\nDialogHeader.displayName = 'DialogHeader';\\n\\ntype DialogTitleRef = React.ElementRef<typeof Title>;\\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof Title>;\\n\\n/**\\n * DialogTitle component that displays the title of the Dialog.\\n *\\n * @param {DialogTitleProps} props - The props for the DialogTitle component.\\n *\\n * @example\\n * ```tsx\\n * <DialogTitle>Dialog Title</DialogTitle>\\n * ```\\n */\\nexport const DialogTitle = forwardRef<DialogTitleRef, DialogTitleProps>(\\n  ({ className, ...props }, ref) => (\\n    <Title ref={ref} className={title({ className })} {...props} />\\n  ),\\n);\\n\\nDialogTitle.displayName = Title.displayName;\\n\\ntype DialogDescriptionRef = React.ElementRef<typeof Description>;\\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<\\n  typeof Description\\n>;\\n\\n/**\\n * DialogDescription component that provides a description for the Dialog.\\n *\\n * @param {DialogDescriptionProps} props - The props for the DialogDescription component.\\n *\\n * @example\\n * ```tsx\\n * <DialogDescription>Dialog Description</DialogDescription>\\n * ```\\n */\\nexport const DialogDescription = forwardRef<\\n  DialogDescriptionRef,\\n  DialogDescriptionProps\\n>(({ className, ...props }, ref) => (\\n  <Description ref={ref} className={description({ className })} {...props} />\\n));\\n\\nDialogDescription.displayName = Description.displayName;\\n\\ntype DialogFooterProps = React.HTMLAttributes<HTMLDivElement>;\\n\\n/**\\n * DialogFooter component that wraps the footer content of the Dialog.\\n *\\n * @param {DialogFooterProps} props - The props for the DialogFooter component.\\n *\\n * @example\\n * ```tsx\\n * <DialogFooter>\\n *   <Button>Close</Button>\\n * </DialogFooter>\\n * ```\\n */\\nexport const DialogFooter = ({ className, ...props }: DialogFooterProps) => (\\n  <div className={footer({ className })} {...props} />\\n);\\n\\nDialogFooter.displayName = 'DialogFooter';\\n"
}
