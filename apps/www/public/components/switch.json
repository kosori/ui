{
  "name": "switch",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-switch"],
  "content": "'use client';\\n\\nimport type { VariantProps } from 'tailwind-variants';\\nimport { forwardRef } from 'react';\\nimport { Root, Thumb } from '@radix-ui/react-switch';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst switchStyles = tv({\\n  slots: {\\n    base: clsx(\\n      'peer box-border inline-flex cursor-pointer items-center rounded-full border-2 border-transparent outline-none transition-colors',\\n      'focus-visible:ring-4',\\n      'disabled:cursor-not-allowed disabled:!bg-grey-bg',\\n      'data-[state=unchecked]:bg-grey-line',\\n      'data-[state=checked]:bg-primary-solid',\\n      'data-[state=unchecked]:focus-visible:ring-grey-focus-ring',\\n      'data-[state=checked]:focus-visible:ring-primary-focus-ring',\\n    ),\\n    thumb: clsx(\\n      'pointer-events-none block rounded-full bg-grey-base shadow-lg transition-transform',\\n      'data-[state=unchecked]:translate-x-0',\\n    ),\\n  },\\n  variants: {\\n    size: {\\n      small: {\\n        base: 'h-4 w-7',\\n        thumb: clsx('size-3', 'data-[state=checked]:translate-x-[13px]'),\\n      },\\n      medium: {\\n        base: 'h-5 w-9',\\n        thumb: clsx('size-4', 'data-[state=checked]:translate-x-4'),\\n      },\\n      large: {\\n        base: 'h-6 w-11',\\n        thumb: clsx('size-5', 'data-[state=checked]:translate-x-5'),\\n      },\\n    },\\n  },\\n  defaultVariants: {\\n    size: 'medium',\\n  },\\n});\\n\\nconst { base, thumb } = switchStyles();\\n\\ntype SwitchRef = React.ElementRef<typeof Root>;\\ntype SwitchRadixProps = React.ComponentPropsWithoutRef<typeof Root>;\\ntype SwitchVariants = VariantProps<typeof switchStyles>;\\ntype SwitchProps = object & SwitchRadixProps & SwitchVariants;\\n\\n/**\\n * Switch component that allows users to toggle between checked and unchecked states.\\n *\\n * @param {SwitchProps} props - The props for the Switch component.\\n * @param {string} [size='medium'] - The size of the switch (e.g. 'small', 'medium', 'large').\\n *\\n * @example\\n * ```tsx\\n * <Switch />\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-switch Switch Docs} for further information.\\n */\\nexport const Switch = forwardRef<SwitchRef, SwitchProps>(\\n  ({ size, className, ...props }, ref) => (\\n    <Root ref={ref} className={base({ className, size })} {...props}>\\n      <Thumb className={thumb({ size })} />\\n    </Root>\\n  ),\\n);\\n\\nSwitch.displayName = Root.displayName;\\n"
}
