{
  "name": "select",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-select"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport {\\n  CaretSortIcon,\\n  CheckIcon,\\n  ChevronDownIcon,\\n  ChevronUpIcon,\\n} from '@radix-ui/react-icons';\\nimport {\\n  Content,\\n  Group,\\n  Icon,\\n  Item,\\n  ItemIndicator,\\n  ItemText,\\n  Label,\\n  Portal,\\n  Root,\\n  ScrollDownButton,\\n  ScrollUpButton,\\n  Separator,\\n  Trigger,\\n  Value,\\n  Viewport,\\n} from '@radix-ui/react-select';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst selectStyles = tv({\\n  slots: {\\n    trigger: clsx(\\n      'flex h-9 w-full cursor-pointer items-center justify-between whitespace-nowrap rounded-lg border border-grey-border bg-grey-base px-3 py-2 text-sm shadow-sm outline-none transition-colors duration-200',\\n      'placeholder:text-grey-placeholder-text',\\n      'focus:ring-4 focus:ring-grey-focus-ring',\\n      'hover:border-grey-border-hover',\\n      'disabled:cursor-not-allowed disabled:bg-grey-bg disabled:text-grey-solid',\\n      '[&>span]:line-clamp-1',\\n    ),\\n    triggerIcon: 'size-4 fill-grey-text',\\n    content: clsx(\\n      'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-lg border border-grey-line bg-grey-base shadow-md',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n    ),\\n    viewport: 'p-1',\\n    item: clsx(\\n      'relative flex w-full cursor-pointer select-none items-center rounded-md py-1.5 pl-8 pr-2 text-sm outline-none transition-colors duration-200',\\n      'focus:bg-primary-bg-hover',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    itemIndicator: 'absolute left-2 flex items-center justify-center',\\n    itemIcon: 'size-4',\\n    scrollUpButton: 'flex cursor-default items-center justify-center py-1',\\n    scrollDownButton: 'flex cursor-default items-center justify-center py-1',\\n    label:\\n      'flex select-none items-center py-1.5 pl-8 pr-2 text-xs font-medium text-grey-text',\\n    separator: '-mx-1 my-1 h-px bg-grey-line',\\n  },\\n  variants: {\\n    position: {\\n      popper: {\\n        content: clsx(\\n          'data-[side=bottom]:translate-y-1',\\n          'data-[side=left]:-translate-x-1',\\n          'data-[side=right]:translate-x-1',\\n          'data-[side=top]:-translate-y-1',\\n        ),\\n        viewport:\\n          'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\\n      },\\n      'item-aligned': '',\\n    },\\n  },\\n});\\n\\nconst {\\n  trigger,\\n  triggerIcon,\\n  content,\\n  viewport,\\n  item,\\n  itemIndicator,\\n  itemIcon,\\n  scrollUpButton,\\n  scrollDownButton,\\n  label,\\n  separator,\\n} = selectStyles();\\n\\n/**\\n * Select component that serves as a container for selectable items.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - The props for the Select component.\\n *\\n * @example\\n * <Select>\\n *   <SelectTrigger className='w-[180px]'>\\n *     <SelectValue placeholder='Theme' />\\n *   </SelectTrigger>\\n *   <SelectContent>\\n *     <SelectItem value='light'>Light</SelectItem>\\n *     <SelectItem value='dark'>Dark</SelectItem>\\n *     <SelectItem value='system'>System</SelectItem>\\n *   </SelectContent>\\n * </Select>\\n *\\n * @see {@link https://dub.sh/ui-select Select Docs} for further information.\\n */\\nexport const Select = Root;\\n\\ntype SelectTriggerRef = React.ElementRef<typeof Trigger>;\\ntype SelectTriggerProps = React.ComponentPropsWithoutRef<typeof Trigger>;\\n\\n/**\\n * SelectTrigger component that triggers the display of the select options.\\n *\\n * @param {SelectTriggerProps} props - The props for the SelectTrigger component.\\n *\\n * @example\\n * <SelectTrigger className='w-[180px]'>Select an option</SelectTrigger>\\n */\\nexport const SelectTrigger = forwardRef<SelectTriggerRef, SelectTriggerProps>(\\n  ({ className, children, ...props }, ref) => (\\n    <Trigger ref={ref} className={trigger({ className })} {...props}>\\n      {children}\\n\\n      <Icon asChild>\\n        <CaretSortIcon className={triggerIcon()} />\\n      </Icon>\\n    </Trigger>\\n  ),\\n);\\n\\nSelectTrigger.displayName = Trigger.displayName;\\n\\n/**\\n * SelectValue component that displays the currently selected value.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Value>} props - The props for the SelectValue component.\\n *\\n * @example\\n * <SelectValue placeholder='Select an option' />\\n */\\nexport const SelectValue = Value;\\n\\ntype SelectContentRef = React.ElementRef<typeof Content>;\\ntype SelectContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * SelectContent component that displays the selectable options.\\n *\\n * @param {SelectContentProps} props - The props for the SelectContent component.\\n *\\n * @example\\n * <SelectContent>\\n *   <SelectItem value='light'>Light</SelectItem>\\n *   <SelectItem value='dark'>Dark</SelectItem>\\n * </SelectContent>\\n */\\nexport const SelectContent = forwardRef<SelectContentRef, SelectContentProps>(\\n  ({ className, children, position, ...props }, ref) => (\\n    <Portal>\\n      <Content\\n        ref={ref}\\n        className={content({ className, position })}\\n        position={position}\\n        {...props}\\n      >\\n        <SelectScrollUpButton />\\n        <Viewport className={viewport({ position })}>{children}</Viewport>\\n        <SelectScrollDownButton />\\n      </Content>\\n    </Portal>\\n  ),\\n);\\n\\nSelectContent.displayName = Content.displayName;\\n\\ntype SelectItemRef = React.ElementRef<typeof Item>;\\ntype SelectItemProps = React.ComponentPropsWithoutRef<typeof Item>;\\n\\n/**\\n * SelectItem component that represents an individual option in the select.\\n *\\n * @param {SelectItemProps} props - The props for the SelectItem component.\\n *\\n * @example\\n * <SelectItem value='light'>Light</SelectItem>\\n */\\nexport const SelectItem = forwardRef<SelectItemRef, SelectItemProps>(\\n  ({ className, children, ...props }, ref) => (\\n    <Item ref={ref} className={item({ className })} {...props}>\\n      <span className={itemIndicator()}>\\n        <ItemIndicator>\\n          <CheckIcon className={itemIcon()} />\\n        </ItemIndicator>\\n      </span>\\n\\n      <ItemText>{children}</ItemText>\\n    </Item>\\n  ),\\n);\\n\\nSelectItem.displayName = Item.displayName;\\n\\ntype SelectScrollUpButtonRef = React.ElementRef<typeof ScrollUpButton>;\\ntype SelectScrollUpButtonProps = React.ComponentPropsWithoutRef<\\n  typeof ScrollUpButton\\n>;\\n\\n/**\\n * SelectScrollUpButton component that allows scrolling up in the select options.\\n *\\n * @param {SelectScrollUpButtonProps} props - The props for the SelectScrollUpButton component.\\n *\\n * @example\\n * <SelectScrollUpButton />\\n */\\nexport const SelectScrollUpButton = forwardRef<\\n  SelectScrollUpButtonRef,\\n  SelectScrollUpButtonProps\\n>(({ className, ...props }, ref) => (\\n  <ScrollUpButton\\n    ref={ref}\\n    className={scrollUpButton({ className })}\\n    {...props}\\n  >\\n    <ChevronUpIcon />\\n  </ScrollUpButton>\\n));\\n\\nSelectScrollUpButton.displayName = ScrollUpButton.displayName;\\n\\ntype SelectScrollDownButtonRef = React.ElementRef<typeof ScrollDownButton>;\\ntype SelectScrollDownButtonProps = React.ComponentPropsWithoutRef<\\n  typeof ScrollDownButton\\n>;\\n\\n/**\\n * SelectScrollDownButton component that allows scrolling down in the select options.\\n *\\n * @param {SelectScrollDownButtonProps} props - The props for the SelectScrollDownButton component.\\n *\\n * @example\\n * <SelectScrollDownButton />\\n */\\nexport const SelectScrollDownButton = forwardRef<\\n  SelectScrollDownButtonRef,\\n  SelectScrollDownButtonProps\\n>(({ className, ...props }, ref) => (\\n  <ScrollDownButton\\n    ref={ref}\\n    className={scrollDownButton({ className })}\\n    {...props}\\n  >\\n    <ChevronDownIcon />\\n  </ScrollDownButton>\\n));\\n\\nSelectScrollDownButton.displayName = ScrollDownButton.displayName;\\n\\n/**\\n * SelectGroup component that groups related select items.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Group>} props - The props for the SelectGroup component.\\n *\\n * @example\\n * <SelectGroup>\\n *   <SelectItem value='light'>Light</SelectItem>\\n * </SelectGroup>\\n */\\nexport const SelectGroup = Group;\\n\\ntype SelectLabelRef = React.ElementRef<typeof Label>;\\ntype SelectLabelProps = React.ComponentPropsWithoutRef<typeof Label>;\\n\\n/**\\n * SelectLabel component that provides a label for the select group.\\n *\\n * @param {SelectLabelProps} props - The props for the SelectLabel component.\\n *\\n * @example\\n * <SelectLabel>Choose a theme</SelectLabel>\\n */\\nexport const SelectLabel = forwardRef<SelectLabelRef, SelectLabelProps>(\\n  ({ className, ...props }, ref) => (\\n    <Label ref={ref} className={label({ className })} {...props} />\\n  ),\\n);\\n\\nSelectLabel.displayName = Label.displayName;\\n\\ntype SelectSeparatorRef = React.ElementRef<typeof Separator>;\\ntype SelectSeparatorProps = React.ComponentPropsWithoutRef<typeof Separator>;\\n\\n/**\\n * SelectSeparator component that visually separates items in the select.\\n *\\n * @param {SelectSeparatorProps} props - The props for the SelectSeparator component.\\n *\\n * @example\\n * <SelectSeparator />\\n */\\nexport const SelectSeparator = forwardRef<\\n  SelectSeparatorRef,\\n  SelectSeparatorProps\\n>(({ className, ...props }, ref) => (\\n  <Separator ref={ref} className={separator({ className })} {...props} />\\n));\\n\\nSelectSeparator.displayName = Separator.displayName;\\n"
}
