{
  "name": "accordion",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-accordion"],
  "content": "'use client';\\n\\nimport { forwardRef } from 'react';\\nimport {\\n  Content,\\n  Header,\\n  Item,\\n  Root,\\n  Trigger,\\n} from '@radix-ui/react-accordion';\\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst accordionStyles = tv({\\n  slots: {\\n    item: clsx(\\n      'w-full rounded-lg border border-grey-border bg-grey-base transition-colors duration-200',\\n      'focus-within:outline focus-within:outline-primary-focus-ring',\\n      'hover:border-grey-border-hover',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:border-grey-line',\\n      'data-[disabled]:hover:border-grey-line',\\n    ),\\n    trigger: clsx(\\n      'group flex min-h-[2.5rem] flex-1 items-center justify-between px-4 py-2 text-start text-sm font-medium text-grey-text-contrast outline-none',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n    ),\\n    triggerIcon: clsx(\\n      'size-4 transition-transform duration-200 ease-in-out',\\n      'group-data-[state=open]:rotate-180',\\n    ),\\n    content: clsx(\\n      'overflow-hidden text-sm text-grey-text',\\n      'data-[disabled]:cursor-not-allowed data-[disabled]:text-grey-solid',\\n      'data-[state=closed]:animate-accordion-up',\\n      'data-[state=open]:animate-accordion-down',\\n    ),\\n  },\\n});\\n\\nconst { item, trigger, triggerIcon, content } = accordionStyles();\\n\\n/**\\n * Accordion component that allows for collapsible content sections.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - Additional props to pass to the accordion container.\\n *\\n * @example\\n * <Accordion type='single' collapsible>\\n *   <AccordionItem value='item-1'>\\n *     <AccordionTrigger>Is it accessible?</AccordionTrigger>\\n *     <AccordionContent>\\n *       Yes. It adheres to the WAI-ARIA design pattern.\\n *     </AccordionContent>\\n *   </AccordionItem>\\n * </Accordion>\\n *\\n * @see {@link https://dub.sh/ui-accordion Accordion Docs} for further information.\\n */\\nexport const Accordion = Root;\\n\\ntype AccordionItemRef = React.ElementRef<typeof Item>;\\ntype AccordionItemProps = React.ComponentPropsWithoutRef<typeof Item>;\\n\\n/**\\n * AccordionItem component that represents a single collapsible section within the Accordion.\\n *\\n * @param {AccordionItemProps} props - Additional props to pass to the accordion item.\\n *\\n * @example\\n * <AccordionItem value='item-1'>\\n *   <AccordionTrigger>Is it accessible?</AccordionTrigger>\\n *   <AccordionContent>\\n *     Yes. It adheres to the WAI-ARIA design pattern.\\n *   </AccordionContent>\\n * </AccordionItem>\\n */\\nexport const AccordionItem = forwardRef<AccordionItemRef, AccordionItemProps>(\\n  ({ className, ...props }, ref) => (\\n    <Item ref={ref} className={item({ className })} {...props} />\\n  ),\\n);\\n\\nAccordionItem.displayName = 'AccordionItem';\\n\\ntype AccordionTriggerRef = React.ElementRef<typeof Trigger>;\\ntype AccordionTriggerProps = React.ComponentPropsWithoutRef<typeof Trigger>;\\n\\n/**\\n * AccordionTrigger component that acts as the clickable header for an AccordionItem.\\n *\\n * @param {AccordionTriggerProps} props - Additional props to pass to the accordion trigger.\\n *\\n * @example\\n * <AccordionTrigger>Is it accessible?</AccordionTrigger>\\n */\\nexport const AccordionTrigger = forwardRef<\\n  AccordionTriggerRef,\\n  AccordionTriggerProps\\n>(({ className, children, ...props }, ref) => (\\n  <Header className='flex'>\\n    <Trigger ref={ref} className={trigger({ className })} {...props}>\\n      {children}\\n      <ChevronDownIcon className={triggerIcon()} />\\n    </Trigger>\\n  </Header>\\n));\\n\\nAccordionTrigger.displayName = 'AccordionTrigger';\\n\\ntype AccordionContentRef = React.ElementRef<typeof Content>;\\ntype AccordionContentProps = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * AccordionContent component that displays the content of an AccordionItem.\\n *\\n * @param {AccordionContentProps} props - Additional props to pass to the accordion content.\\n *\\n * @example\\n * <AccordionContent>\\n *   Yes. It adheres to the WAI-ARIA design pattern.\\n * </AccordionContent>\\n */\\nexport const AccordionContent = forwardRef<\\n  AccordionContentRef,\\n  AccordionContentProps\\n>(({ className, children, ...props }, ref) => (\\n  <Content ref={ref} className={content({ className })} {...props}>\\n    <div className='px-4 pb-2'>{children}</div>\\n  </Content>\\n));\\n\\nAccordionContent.displayName = 'AccordionContent';\\n"
}
