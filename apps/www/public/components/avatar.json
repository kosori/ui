{
  "name": "avatar",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-avatar"],
  "content": "'use client';\\n\\nimport type { VariantProps } from 'tailwind-variants';\\nimport { forwardRef } from 'react';\\nimport { Fallback, Image, Root } from '@radix-ui/react-avatar';\\nimport { tv } from 'tailwind-variants';\\n\\nconst avatarStyles = tv({\\n  slots: {\\n    base: 'relative flex shrink-0 overflow-hidden',\\n    image: 'aspect-square size-full',\\n    fallback: 'flex size-full items-center justify-center bg-grey-bg-subtle',\\n  },\\n  variants: {\\n    shape: {\\n      round: { base: 'rounded-full' },\\n      square: { base: '' },\\n    },\\n    size: {\\n      small: { base: 'size-8' },\\n      medium: { base: 'size-10' },\\n      large: { base: 'size-12' },\\n    },\\n  },\\n  compoundVariants: [\\n    {\\n      shape: 'square',\\n      size: 'small',\\n      className: { base: 'rounded-lg' },\\n    },\\n    {\\n      shape: 'square',\\n      size: 'medium',\\n      className: { base: 'rounded-xl' },\\n    },\\n    {\\n      shape: 'square',\\n      size: 'large',\\n      className: { base: 'rounded-2xl' },\\n    },\\n  ],\\n  defaultVariants: {\\n    shape: 'round',\\n    size: 'small',\\n  },\\n});\\n\\nconst { base, image, fallback } = avatarStyles();\\n\\ntype AvatarRef = React.ElementRef<typeof Root>;\\ntype AvatarRadixProps = React.ComponentPropsWithoutRef<typeof Root>;\\ntype AvatarVariants = VariantProps<typeof avatarStyles>;\\ntype AvatarProps = AvatarVariants & AvatarRadixProps;\\n\\n/**\\n * Avatar component that displays a user's image or a fallback if the image is not available.\\n *\\n * @param {AvatarProps} props - The props for the Avatar component.\\n * @param {'round' | 'square'} [shape='round'] - The shape of the avatar (e.g., 'round', 'square').\\n * @param {'small' | 'medium' | 'large'} [size='small'] - The size of the avatar (e.g., 'small', 'medium', 'large').\\n *\\n * @example\\n * ```tsx\\n * <Avatar>\\n *   <AvatarImage src='https://github.com/codingcodax.png' />\\n *   <AvatarFallback>CC</AvatarFallback>\\n * </Avatar>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-avatar Avatar Docs} for further information.\\n */\\nexport const Avatar = forwardRef<AvatarRef, AvatarProps>(\\n  ({ shape, size, className, ...props }, ref) => (\\n    <Root ref={ref} className={base({ className, shape, size })} {...props} />\\n  ),\\n);\\n\\nAvatar.displayName = Root.displayName;\\n\\ntype AvatarImageRef = React.ElementRef<typeof Image>;\\ntype AvatarImageProps = React.ComponentPropsWithoutRef<typeof Image>;\\n\\n/**\\n * AvatarImage component for the Avatar that displays the user's image.\\n *\\n * @param {AvatarImageProps} props - Additional props to pass to the AvatarImage component.\\n *\\n * @example\\n * ```tsx\\n * <AvatarImage src='https://github.com/codingcodax.png' />\\n * ```\\n */\\nexport const AvatarImage = forwardRef<AvatarImageRef, AvatarImageProps>(\\n  ({ className, ...props }, ref) => (\\n    <Image ref={ref} className={image({ className })} {...props} />\\n  ),\\n);\\n\\nAvatarImage.displayName = Image.displayName;\\n\\ntype AvatarFallbackRef = React.ElementRef<typeof Fallback>;\\ntype AvatarFallbackProps = React.ComponentPropsWithoutRef<typeof Fallback>;\\n\\n/**\\n * AvatarFallback component for the Avatar that displays when the image is not available.\\n *\\n * @param {AvatarFallbackProps} props - Additional props to pass to the AvatarFallback component.\\n *\\n * @example\\n * ```tsx\\n * <AvatarFallback>CC</AvatarFallback>\\n * ```\\n */\\nexport const AvatarFallback = forwardRef<\\n  AvatarFallbackRef,\\n  AvatarFallbackProps\\n>(({ className, ...props }, ref) => (\\n  <Fallback ref={ref} className={fallback({ className })} {...props} />\\n));\\n\\nAvatarFallback.displayName = Fallback.displayName;\\n"
}
