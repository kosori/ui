{
  "name": "tooltip",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-tooltip"],
  "content": "import { forwardRef } from 'react';\\nimport { Content, Provider, Root, Trigger } from '@radix-ui/react-tooltip';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst tooltipStyles = tv({\\n  slots: {\\n    content: clsx(\\n      'z-50 overflow-hidden rounded-lg border border-grey-line bg-grey-base px-3 py-1.5 text-sm shadow-md animate-in fade-in-0 zoom-in-95',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95',\\n      'data-[side=bottom]:slide-in-from-top-2',\\n      'data-[side=left]:slide-in-from-right-2',\\n      'data-[side=right]:slide-in-from-left-2',\\n      'data-[side=top]:slide-in-from-bottom-2',\\n    ),\\n  },\\n});\\n\\nconst { content } = tooltipStyles();\\n\\n/**\\n * TooltipProvider component that provides context for tooltips.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Provider>} props - The props for the TooltipProvider component.\\n *\\n * @example\\n * <TooltipProvider>\\n *   <Tooltip>\\n *     <TooltipTrigger>Hover</TooltipTrigger>\\n *     <TooltipContent>\\n *       <p>Add to library</p>\\n *     </TooltipContent>\\n *   </Tooltip>\\n * </TooltipProvider>\\n */\\nexport const TooltipProvider = Provider;\\n\\n/**\\n * Tooltip component that serves as a container for the tooltip content.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - The props for the Tooltip component.\\n *\\n * @example\\n * <Tooltip>\\n *   <TooltipTrigger>Hover</TooltipTrigger>\\n *   <TooltipContent>Tooltip text</TooltipContent>\\n * </Tooltip>\\n */\\nexport const Tooltip = Root;\\n\\n/**\\n * TooltipTrigger component that triggers the display of the tooltip content.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Trigger>} props - The props for the TooltipTrigger component.\\n *\\n * @example\\n * <TooltipTrigger>Hover me</TooltipTrigger>\\n */\\nexport const TooltipTrigger = Trigger;\\n\\ntype Ref = React.ElementRef<typeof Content>;\\ntype Props = React.ComponentPropsWithoutRef<typeof Content>;\\n\\n/**\\n * TooltipContent component that displays the content of the tooltip.\\n *\\n * @param {Props} props - The props for the TooltipContent component.\\n *\\n * @example\\n * <TooltipContent>\\n *   <p>Tooltip description</p>\\n * </TooltipContent>\\n */\\nexport const TooltipContent = forwardRef<Ref, Props>(\\n  ({ className, sideOffset = 4, ...props }, ref) => (\\n    <Content\\n      ref={ref}\\n      className={content({ className })}\\n      sideOffset={sideOffset}\\n      {...props}\\n    />\\n  ),\\n);\\n\\nTooltipContent.displayName = Content.displayName;\\n"
}
