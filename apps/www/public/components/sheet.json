{
  "name": "sheet",
  "type": "component:ui",
  "dependencies": ["@radix-ui/react-dialog"],
  "content": "import type { VariantProps } from 'tailwind-variants';\\nimport { forwardRef } from 'react';\\nimport {\\n  Close,\\n  Content,\\n  Description,\\n  Overlay,\\n  Portal,\\n  Root,\\n  Title,\\n  Trigger,\\n} from '@radix-ui/react-dialog';\\nimport { Cross2Icon } from '@radix-ui/react-icons';\\nimport { clsx } from 'clsx/lite';\\nimport { tv } from 'tailwind-variants';\\n\\nconst sheetStyles = tv({\\n  slots: {\\n    overlay: clsx(\\n      'fixed inset-0 z-50 bg-black-a6',\\n      'data-[state=open]:animate-in data-[state=open]:fade-in-0',\\n      'data-[state=closed]:animate-out data-[state=closed]:fade-out-0',\\n    ),\\n    content: clsx(\\n      'fixed z-50 gap-4 border-grey-line bg-grey-base p-6 shadow-lg transition ease-in-out',\\n      'data-[state=open]:duration-500 data-[state=open]:animate-in',\\n      'data-[state=closed]:duration-300 data-[state=closed]:animate-out',\\n    ),\\n    contentClose: clsx(\\n      'absolute right-4 top-4 rounded ring-offset-grey-bg transition-opacity',\\n      'focus:outline focus:outline-grey-focus-ring',\\n      'disabled:cursor-not-allowed disabled:text-grey-text',\\n    ),\\n    contentIcon: 'size-4',\\n    header: clsx('flex flex-col space-y-2 text-center', 'sm:text-left'),\\n    title: 'text-lg font-semibold text-grey-text-contrast',\\n    description: 'text-sm text-grey-text',\\n    footer: clsx(\\n      'flex flex-col-reverse',\\n      'sm:flex-row sm:justify-end sm:space-x-2',\\n    ),\\n  },\\n  variants: {\\n    side: {\\n      top: {\\n        content: clsx(\\n          'inset-x-0 top-0 border-b',\\n          'data-[state=open]:slide-in-from-top',\\n          'data-[state=closed]:slide-out-to-top',\\n        ),\\n      },\\n      bottom: {\\n        content: clsx(\\n          'inset-x-0 bottom-0 border-t',\\n          'data-[state=open]:slide-in-from-bottom',\\n          'data-[state=closed]:slide-out-to-bottom',\\n        ),\\n      },\\n      left: {\\n        content: clsx(\\n          'inset-y-0 left-0 h-full w-3/4 border-r',\\n          'sm:max-w-sm',\\n          'data-[state=open]:slide-in-from-left',\\n          'data-[state=closed]:slide-out-to-left',\\n        ),\\n      },\\n      right: {\\n        content: clsx(\\n          'inset-y-0 right-0 h-full w-3/4 border-l',\\n          'sm:max-w-sm',\\n          'data-[state=open]:slide-in-from-right',\\n          'data-[state=closed]:slide-out-to-right',\\n        ),\\n      },\\n    },\\n  },\\n  defaultVariants: {\\n    side: 'right',\\n  },\\n});\\n\\nconst {\\n  overlay,\\n  content,\\n  contentClose,\\n  contentIcon,\\n  header,\\n  title,\\n  description,\\n  footer,\\n} = sheetStyles();\\n\\n/**\\n * Sheet component that serves as a container for content that can be displayed in a modal-like manner.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Root>} props - The props for the Sheet component.\\n *\\n * @example\\n * ```tsx\\n * <Sheet>\\n *   <SheetTrigger>Open</SheetTrigger>\\n *   <SheetContent>\\n *     <SheetHeader>\\n *       <SheetTitle>Are you absolutely sure?</SheetTitle>\\n *       <SheetDescription>\\n *         This action cannot be undone. This will permanently delete your account\\n *         and remove your data from our servers.\\n *       </SheetDescription>\\n *     </SheetHeader>\\n *   </SheetContent>\\n * </Sheet>\\n * ```\\n *\\n * @see {@link https://dub.sh/ui-sheet Sheet Docs} for further information.\\n */\\nexport const Sheet = Root;\\n\\n/**\\n * SheetTrigger component that triggers the display of the sheet content.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Trigger>} props - The props for the SheetTrigger component.\\n *\\n * @example\\n * ```tsx\\n * <SheetTrigger>Open</SheetTrigger>\\n * ```\\n */\\nexport const SheetTrigger = Trigger;\\n\\n/**\\n * SheetPortal component that renders the sheet content in a portal.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Portal>} props - The props for the SheetPortal component.\\n *\\n * @example\\n * ```tsx\\n * <SheetPortal>{Your portal content}</SheetPortal>\\n * ```\\n */\\nexport const SheetPortal = Portal;\\n\\ntype SheetOverlayRef = React.ElementRef<typeof Overlay>;\\ntype SheetOverlayProps = React.ComponentPropsWithoutRef<typeof Overlay>;\\n\\n/**\\n * SheetOverlay component that represents the overlay behind the sheet content.\\n *\\n * @param {SheetOverlayProps} props - The props for the SheetOverlay component.\\n *\\n * @example\\n * ```tsx\\n * <SheetOverlay />\\n * ```\\n */\\n\\nexport const SheetOverlay = forwardRef<SheetOverlayRef, SheetOverlayProps>(\\n  ({ className, ...props }, ref) => (\\n    <Overlay className={overlay({ className })} {...props} ref={ref} />\\n  ),\\n);\\n\\nSheetOverlay.displayName = Overlay.displayName;\\n\\ntype SheetContentRadixRef = React.ElementRef<typeof Content>;\\ntype SheetVariants = VariantProps<typeof sheetStyles>;\\ntype SheetContentProps = React.ComponentPropsWithoutRef<typeof Content> &\\n  SheetVariants;\\n\\n/**\\n * SheetContent component that displays the content of the sheet.\\n *\\n * @param {SheetContentProps} props - The props for the SheetContent component.\\n * @param {'top' | 'bottom' | 'left' | 'right'} [side='right'] - The side of the sheet to display the content (e.g. 'top', 'bottom', 'left', 'right').\\n *\\n * @example\\n * ```tsx\\n * <SheetContent>\\n *   {Your content here}\\n * </SheetContent>\\n * ```\\n */\\nexport const SheetContent = forwardRef<SheetContentRadixRef, SheetContentProps>(\\n  ({ side = 'right', className, children, ...props }, ref) => (\\n    <SheetPortal>\\n      <SheetOverlay />\\n      <Content ref={ref} className={content({ className, side })} {...props}>\\n        {children}\\n\\n        <Close className={contentClose()}>\\n          <Cross2Icon className={contentIcon()} />\\n          <span className='sr-only'>Close</span>\\n        </Close>\\n      </Content>\\n    </SheetPortal>\\n  ),\\n);\\n\\nSheetContent.displayName = Content.displayName;\\n\\n/**\\n * SheetClose component that allows closing the sheet.\\n *\\n * @param {React.ComponentPropsWithoutRef<typeof Close>} props - The props for the SheetClose component.\\n *\\n * @example\\n * ```tsx\\n * <SheetClose />\\n * ```\\n */\\nexport const SheetClose = Close;\\n\\n/**\\n * SheetHeader component that provides a header for the sheet content.\\n *\\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The props for the SheetHeader component.\\n *\\n * @example\\n * ```tsx\\n * <SheetHeader>\\n *   <SheetTitle>Title</SheetTitle>\\n * </SheetHeader>\\n * ```\\n */\\nexport const SheetHeader = ({\\n  className,\\n  ...props\\n}: React.HTMLAttributes<HTMLDivElement>) => (\\n  <div className={header({ className })} {...props} />\\n);\\n\\nSheetHeader.displayName = 'SheetHeader';\\n\\ntype SheetTitleRef = React.ElementRef<typeof Title>;\\ntype SheetTitleProps = React.ComponentPropsWithoutRef<typeof Title>;\\n\\n/**\\n * SheetTitle component that displays the title of the sheet.\\n *\\n * @param {SheetTitleProps} props - The props for the SheetTitle component.\\n *\\n * @example\\n * ```tsx\\n * <SheetTitle>Title</SheetTitle>\\n * ```\\n */\\nexport const SheetTitle = forwardRef<SheetTitleRef, SheetTitleProps>(\\n  ({ className, ...props }, ref) => (\\n    <Title ref={ref} className={title({ className })} {...props} />\\n  ),\\n);\\n\\nSheetTitle.displayName = Title.displayName;\\n\\ntype SheetDescriptionRef = React.ElementRef<typeof Description>;\\ntype SheetDescriptionProps = React.ComponentPropsWithoutRef<typeof Description>;\\n\\n/**\\n * SheetDescription component that provides a description for the sheet content.\\n *\\n * @param {SheetDescriptionProps} props - The props for the SheetDescription component.\\n *\\n * @example\\n * ```tsx\\n * <SheetDescription>Description text here.</SheetDescription>\\n * ```\\n */\\nexport const SheetDescription = forwardRef<\\n  SheetDescriptionRef,\\n  SheetDescriptionProps\\n>(({ className, ...props }, ref) => (\\n  <Description ref={ref} className={description({ className })} {...props} />\\n));\\n\\nSheetDescription.displayName = Description.displayName;\\n\\n/**\\n * SheetFooter component that provides a footer for the sheet content.\\n *\\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The props for the SheetFooter component.\\n *\\n * @example\\n * ```tsx\\n * <SheetFooter>\\n *   {Footer content here}\\n * </SheetFooter>\\n * ```\\n */\\nexport const SheetFooter = ({\\n  className,\\n  ...props\\n}: React.HTMLAttributes<HTMLDivElement>) => (\\n  <div className={footer({ className })} {...props} />\\n);\\n\\nSheetFooter.displayName = 'SheetFooter';\\n"
}
